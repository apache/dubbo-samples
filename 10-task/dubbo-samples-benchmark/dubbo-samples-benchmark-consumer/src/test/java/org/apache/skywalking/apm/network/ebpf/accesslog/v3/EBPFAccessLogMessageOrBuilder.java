// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebpf/accesslog.proto

package org.apache.skywalking.apm.network.ebpf.accesslog.v3;

public interface EBPFAccessLogMessageOrBuilder extends
    // @@protoc_insertion_point(interface_extends:skywalking.v3.EBPFAccessLogMessage)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * current node information, only not null when first message or have update
   * </pre>
   *
   * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
   * @return Whether the node field is set.
   */
  boolean hasNode();
  /**
   * <pre>
   * current node information, only not null when first message or have update
   * </pre>
   *
   * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
   * @return The node.
   */
  EBPFAccessLogNodeInfo getNode();
  /**
   * <pre>
   * current node information, only not null when first message or have update
   * </pre>
   *
   * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
   */
  EBPFAccessLogNodeInfoOrBuilder getNodeOrBuilder();

  /**
   * <pre>
   * local process and remote process connection information
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
   * @return Whether the connection field is set.
   */
  boolean hasConnection();
  /**
   * <pre>
   * local process and remote process connection information
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
   * @return The connection.
   */
  AccessLogConnection getConnection();
  /**
   * <pre>
   * local process and remote process connection information
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
   */
  AccessLogConnectionOrBuilder getConnectionOrBuilder();

  /**
   * <pre>
   * kernel level metrics
   * </pre>
   *
   * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
   */
  java.util.List<AccessLogKernelLog>
      getKernelLogsList();
  /**
   * <pre>
   * kernel level metrics
   * </pre>
   *
   * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
   */
  AccessLogKernelLog getKernelLogs(int index);
  /**
   * <pre>
   * kernel level metrics
   * </pre>
   *
   * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
   */
  int getKernelLogsCount();
  /**
   * <pre>
   * kernel level metrics
   * </pre>
   *
   * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
   */
  java.util.List<? extends AccessLogKernelLogOrBuilder>
      getKernelLogsOrBuilderList();
  /**
   * <pre>
   * kernel level metrics
   * </pre>
   *
   * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
   */
  AccessLogKernelLogOrBuilder getKernelLogsOrBuilder(
      int index);

  /**
   * <pre>
   * application protocol log
   * if the protocol is detected, the kernel logs is works the related logs
   * otherwise, the kernel log is not related and is sent periodically
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
   * @return Whether the protocolLog field is set.
   */
  boolean hasProtocolLog();
  /**
   * <pre>
   * application protocol log
   * if the protocol is detected, the kernel logs is works the related logs
   * otherwise, the kernel log is not related and is sent periodically
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
   * @return The protocolLog.
   */
  AccessLogProtocolLogs getProtocolLog();
  /**
   * <pre>
   * application protocol log
   * if the protocol is detected, the kernel logs is works the related logs
   * otherwise, the kernel log is not related and is sent periodically
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
   */
  AccessLogProtocolLogsOrBuilder getProtocolLogOrBuilder();
}
