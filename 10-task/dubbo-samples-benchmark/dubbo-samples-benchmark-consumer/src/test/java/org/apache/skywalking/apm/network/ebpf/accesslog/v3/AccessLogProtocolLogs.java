// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebpf/accesslog.proto

package org.apache.skywalking.apm.network.ebpf.accesslog.v3;

/**
 * Protobuf type {@code skywalking.v3.AccessLogProtocolLogs}
 */
public final class AccessLogProtocolLogs extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:skywalking.v3.AccessLogProtocolLogs)
    AccessLogProtocolLogsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AccessLogProtocolLogs.newBuilder() to construct.
  private AccessLogProtocolLogs(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AccessLogProtocolLogs() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new AccessLogProtocolLogs();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private AccessLogProtocolLogs(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            AccessLogHTTPProtocol.Builder subBuilder = null;
            if (protocolCase_ == 1) {
              subBuilder = ((AccessLogHTTPProtocol) protocol_).toBuilder();
            }
            protocol_ =
                input.readMessage(AccessLogHTTPProtocol.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((AccessLogHTTPProtocol) protocol_);
              protocol_ = subBuilder.buildPartial();
            }
            protocolCase_ = 1;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Accesslog.internal_static_skywalking_v3_AccessLogProtocolLogs_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Accesslog.internal_static_skywalking_v3_AccessLogProtocolLogs_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            AccessLogProtocolLogs.class, Builder.class);
  }

  private int protocolCase_ = 0;
  private Object protocol_;
  public enum ProtocolCase
      implements com.google.protobuf.Internal.EnumLite,
          InternalOneOfEnum {
    HTTP(1),
    PROTOCOL_NOT_SET(0);
    private final int value;
    private ProtocolCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static ProtocolCase valueOf(int value) {
      return forNumber(value);
    }

    public static ProtocolCase forNumber(int value) {
      switch (value) {
        case 1: return HTTP;
        case 0: return PROTOCOL_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ProtocolCase
  getProtocolCase() {
    return ProtocolCase.forNumber(
        protocolCase_);
  }

  public static final int HTTP_FIELD_NUMBER = 1;
  /**
   * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
   * @return Whether the http field is set.
   */
  @Override
  public boolean hasHttp() {
    return protocolCase_ == 1;
  }
  /**
   * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
   * @return The http.
   */
  @Override
  public AccessLogHTTPProtocol getHttp() {
    if (protocolCase_ == 1) {
       return (AccessLogHTTPProtocol) protocol_;
    }
    return AccessLogHTTPProtocol.getDefaultInstance();
  }
  /**
   * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
   */
  @Override
  public AccessLogHTTPProtocolOrBuilder getHttpOrBuilder() {
    if (protocolCase_ == 1) {
       return (AccessLogHTTPProtocol) protocol_;
    }
    return AccessLogHTTPProtocol.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (protocolCase_ == 1) {
      output.writeMessage(1, (AccessLogHTTPProtocol) protocol_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (protocolCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (AccessLogHTTPProtocol) protocol_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof AccessLogProtocolLogs)) {
      return super.equals(obj);
    }
    AccessLogProtocolLogs other = (AccessLogProtocolLogs) obj;

    if (!getProtocolCase().equals(other.getProtocolCase())) return false;
    switch (protocolCase_) {
      case 1:
        if (!getHttp()
            .equals(other.getHttp())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (protocolCase_) {
      case 1:
        hash = (37 * hash) + HTTP_FIELD_NUMBER;
        hash = (53 * hash) + getHttp().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static AccessLogProtocolLogs parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static AccessLogProtocolLogs parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static AccessLogProtocolLogs parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static AccessLogProtocolLogs parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static AccessLogProtocolLogs parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static AccessLogProtocolLogs parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static AccessLogProtocolLogs parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static AccessLogProtocolLogs parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static AccessLogProtocolLogs parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static AccessLogProtocolLogs parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static AccessLogProtocolLogs parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static AccessLogProtocolLogs parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(AccessLogProtocolLogs prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code skywalking.v3.AccessLogProtocolLogs}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:skywalking.v3.AccessLogProtocolLogs)
      AccessLogProtocolLogsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Accesslog.internal_static_skywalking_v3_AccessLogProtocolLogs_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Accesslog.internal_static_skywalking_v3_AccessLogProtocolLogs_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AccessLogProtocolLogs.class, Builder.class);
    }

    // Construct using org.apache.skywalking.apm.network.ebpf.accesslog.v3.AccessLogProtocolLogs.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      protocolCase_ = 0;
      protocol_ = null;
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Accesslog.internal_static_skywalking_v3_AccessLogProtocolLogs_descriptor;
    }

    @Override
    public AccessLogProtocolLogs getDefaultInstanceForType() {
      return AccessLogProtocolLogs.getDefaultInstance();
    }

    @Override
    public AccessLogProtocolLogs build() {
      AccessLogProtocolLogs result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public AccessLogProtocolLogs buildPartial() {
      AccessLogProtocolLogs result = new AccessLogProtocolLogs(this);
      if (protocolCase_ == 1) {
        if (httpBuilder_ == null) {
          result.protocol_ = protocol_;
        } else {
          result.protocol_ = httpBuilder_.build();
        }
      }
      result.protocolCase_ = protocolCase_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof AccessLogProtocolLogs) {
        return mergeFrom((AccessLogProtocolLogs)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(AccessLogProtocolLogs other) {
      if (other == AccessLogProtocolLogs.getDefaultInstance()) return this;
      switch (other.getProtocolCase()) {
        case HTTP: {
          mergeHttp(other.getHttp());
          break;
        }
        case PROTOCOL_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      AccessLogProtocolLogs parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (AccessLogProtocolLogs) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int protocolCase_ = 0;
    private Object protocol_;
    public ProtocolCase
        getProtocolCase() {
      return ProtocolCase.forNumber(
          protocolCase_);
    }

    public Builder clearProtocol() {
      protocolCase_ = 0;
      protocol_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        AccessLogHTTPProtocol, AccessLogHTTPProtocol.Builder, AccessLogHTTPProtocolOrBuilder> httpBuilder_;
    /**
     * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
     * @return Whether the http field is set.
     */
    @Override
    public boolean hasHttp() {
      return protocolCase_ == 1;
    }
    /**
     * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
     * @return The http.
     */
    @Override
    public AccessLogHTTPProtocol getHttp() {
      if (httpBuilder_ == null) {
        if (protocolCase_ == 1) {
          return (AccessLogHTTPProtocol) protocol_;
        }
        return AccessLogHTTPProtocol.getDefaultInstance();
      } else {
        if (protocolCase_ == 1) {
          return httpBuilder_.getMessage();
        }
        return AccessLogHTTPProtocol.getDefaultInstance();
      }
    }
    /**
     * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
     */
    public Builder setHttp(AccessLogHTTPProtocol value) {
      if (httpBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        protocol_ = value;
        onChanged();
      } else {
        httpBuilder_.setMessage(value);
      }
      protocolCase_ = 1;
      return this;
    }
    /**
     * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
     */
    public Builder setHttp(
        AccessLogHTTPProtocol.Builder builderForValue) {
      if (httpBuilder_ == null) {
        protocol_ = builderForValue.build();
        onChanged();
      } else {
        httpBuilder_.setMessage(builderForValue.build());
      }
      protocolCase_ = 1;
      return this;
    }
    /**
     * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
     */
    public Builder mergeHttp(AccessLogHTTPProtocol value) {
      if (httpBuilder_ == null) {
        if (protocolCase_ == 1 &&
            protocol_ != AccessLogHTTPProtocol.getDefaultInstance()) {
          protocol_ = AccessLogHTTPProtocol.newBuilder((AccessLogHTTPProtocol) protocol_)
              .mergeFrom(value).buildPartial();
        } else {
          protocol_ = value;
        }
        onChanged();
      } else {
        if (protocolCase_ == 1) {
          httpBuilder_.mergeFrom(value);
        }
        httpBuilder_.setMessage(value);
      }
      protocolCase_ = 1;
      return this;
    }
    /**
     * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
     */
    public Builder clearHttp() {
      if (httpBuilder_ == null) {
        if (protocolCase_ == 1) {
          protocolCase_ = 0;
          protocol_ = null;
          onChanged();
        }
      } else {
        if (protocolCase_ == 1) {
          protocolCase_ = 0;
          protocol_ = null;
        }
        httpBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
     */
    public AccessLogHTTPProtocol.Builder getHttpBuilder() {
      return getHttpFieldBuilder().getBuilder();
    }
    /**
     * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
     */
    @Override
    public AccessLogHTTPProtocolOrBuilder getHttpOrBuilder() {
      if ((protocolCase_ == 1) && (httpBuilder_ != null)) {
        return httpBuilder_.getMessageOrBuilder();
      } else {
        if (protocolCase_ == 1) {
          return (AccessLogHTTPProtocol) protocol_;
        }
        return AccessLogHTTPProtocol.getDefaultInstance();
      }
    }
    /**
     * <code>.skywalking.v3.AccessLogHTTPProtocol http = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        AccessLogHTTPProtocol, AccessLogHTTPProtocol.Builder, AccessLogHTTPProtocolOrBuilder>
        getHttpFieldBuilder() {
      if (httpBuilder_ == null) {
        if (!(protocolCase_ == 1)) {
          protocol_ = AccessLogHTTPProtocol.getDefaultInstance();
        }
        httpBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            AccessLogHTTPProtocol, AccessLogHTTPProtocol.Builder, AccessLogHTTPProtocolOrBuilder>(
                (AccessLogHTTPProtocol) protocol_,
                getParentForChildren(),
                isClean());
        protocol_ = null;
      }
      protocolCase_ = 1;
      onChanged();;
      return httpBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:skywalking.v3.AccessLogProtocolLogs)
  }

  // @@protoc_insertion_point(class_scope:skywalking.v3.AccessLogProtocolLogs)
  private static final AccessLogProtocolLogs DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new AccessLogProtocolLogs();
  }

  public static AccessLogProtocolLogs getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AccessLogProtocolLogs>
      PARSER = new com.google.protobuf.AbstractParser<AccessLogProtocolLogs>() {
    @Override
    public AccessLogProtocolLogs parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new AccessLogProtocolLogs(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<AccessLogProtocolLogs> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<AccessLogProtocolLogs> getParserForType() {
    return PARSER;
  }

  @Override
  public AccessLogProtocolLogs getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

