// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebpf/profiling/Profile.proto

package org.apache.skywalking.apm.network.ebpf.profiling.v3;

public interface EBPFOffCPUProfilingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:skywalking.v3.EBPFOffCPUProfiling)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * stack data in one task(thread)
   * </pre>
   *
   * <code>repeated .skywalking.v3.EBPFProfilingStackMetadata stacks = 1;</code>
   */
  java.util.List<EBPFProfilingStackMetadata>
      getStacksList();
  /**
   * <pre>
   * stack data in one task(thread)
   * </pre>
   *
   * <code>repeated .skywalking.v3.EBPFProfilingStackMetadata stacks = 1;</code>
   */
  EBPFProfilingStackMetadata getStacks(int index);
  /**
   * <pre>
   * stack data in one task(thread)
   * </pre>
   *
   * <code>repeated .skywalking.v3.EBPFProfilingStackMetadata stacks = 1;</code>
   */
  int getStacksCount();
  /**
   * <pre>
   * stack data in one task(thread)
   * </pre>
   *
   * <code>repeated .skywalking.v3.EBPFProfilingStackMetadata stacks = 1;</code>
   */
  java.util.List<? extends EBPFProfilingStackMetadataOrBuilder>
      getStacksOrBuilderList();
  /**
   * <pre>
   * stack data in one task(thread)
   * </pre>
   *
   * <code>repeated .skywalking.v3.EBPFProfilingStackMetadata stacks = 1;</code>
   */
  EBPFProfilingStackMetadataOrBuilder getStacksOrBuilder(
      int index);

  /**
   * <pre>
   * total count of the process is switched to off cpu by the scheduler.
   * </pre>
   *
   * <code>int32 switchCount = 2;</code>
   * @return The switchCount.
   */
  int getSwitchCount();

  /**
   * <pre>
   * where time(nanoseconds) is spent waiting while blocked on I/O, locks, timers, paging/swapping, etc.
   * </pre>
   *
   * <code>int64 duration = 3;</code>
   * @return The duration.
   */
  long getDuration();
}
