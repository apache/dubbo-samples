// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebpf/profiling/Continuous.proto

package org.apache.skywalking.apm.network.ebpf.profiling.v3;

public interface ContinuousProfilingReportOrBuilder extends
    // @@protoc_insertion_point(interface_extends:skywalking.v3.ContinuousProfilingReport)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * over threshold process entity
   * </pre>
   *
   * <code>string layer = 1;</code>
   * @return The layer.
   */
  String getLayer();
  /**
   * <pre>
   * over threshold process entity
   * </pre>
   *
   * <code>string layer = 1;</code>
   * @return The bytes for layer.
   */
  com.google.protobuf.ByteString
      getLayerBytes();

  /**
   * <code>string serviceName = 2;</code>
   * @return The serviceName.
   */
  String getServiceName();
  /**
   * <code>string serviceName = 2;</code>
   * @return The bytes for serviceName.
   */
  com.google.protobuf.ByteString
      getServiceNameBytes();

  /**
   * <code>string instanceName = 3;</code>
   * @return The instanceName.
   */
  String getInstanceName();
  /**
   * <code>string instanceName = 3;</code>
   * @return The bytes for instanceName.
   */
  com.google.protobuf.ByteString
      getInstanceNameBytes();

  /**
   * <code>string processName = 4;</code>
   * @return The processName.
   */
  String getProcessName();
  /**
   * <code>string processName = 4;</code>
   * @return The bytes for processName.
   */
  com.google.protobuf.ByteString
      getProcessNameBytes();

  /**
   * <pre>
   * reached thresholds causes
   * </pre>
   *
   * <code>repeated .skywalking.v3.ContinuousProfilingCause causes = 5;</code>
   */
  java.util.List<ContinuousProfilingCause>
      getCausesList();
  /**
   * <pre>
   * reached thresholds causes
   * </pre>
   *
   * <code>repeated .skywalking.v3.ContinuousProfilingCause causes = 5;</code>
   */
  ContinuousProfilingCause getCauses(int index);
  /**
   * <pre>
   * reached thresholds causes
   * </pre>
   *
   * <code>repeated .skywalking.v3.ContinuousProfilingCause causes = 5;</code>
   */
  int getCausesCount();
  /**
   * <pre>
   * reached thresholds causes
   * </pre>
   *
   * <code>repeated .skywalking.v3.ContinuousProfilingCause causes = 5;</code>
   */
  java.util.List<? extends ContinuousProfilingCauseOrBuilder>
      getCausesOrBuilderList();
  /**
   * <pre>
   * reached thresholds causes
   * </pre>
   *
   * <code>repeated .skywalking.v3.ContinuousProfilingCause causes = 5;</code>
   */
  ContinuousProfilingCauseOrBuilder getCausesOrBuilder(
      int index);

  /**
   * <pre>
   * The execution duration for this triggered profiling.
   * This is set at the agent side.
   * </pre>
   *
   * <code>int32 duration = 6;</code>
   * @return The duration.
   */
  int getDuration();

  /**
   * <code>.skywalking.v3.ContinuousOnCPUProfilingTask onCPU = 7;</code>
   * @return Whether the onCPU field is set.
   */
  boolean hasOnCPU();
  /**
   * <code>.skywalking.v3.ContinuousOnCPUProfilingTask onCPU = 7;</code>
   * @return The onCPU.
   */
  ContinuousOnCPUProfilingTask getOnCPU();
  /**
   * <code>.skywalking.v3.ContinuousOnCPUProfilingTask onCPU = 7;</code>
   */
  ContinuousOnCPUProfilingTaskOrBuilder getOnCPUOrBuilder();

  /**
   * <code>.skywalking.v3.ContinuousOffCPUProfilingTask offCPU = 8;</code>
   * @return Whether the offCPU field is set.
   */
  boolean hasOffCPU();
  /**
   * <code>.skywalking.v3.ContinuousOffCPUProfilingTask offCPU = 8;</code>
   * @return The offCPU.
   */
  ContinuousOffCPUProfilingTask getOffCPU();
  /**
   * <code>.skywalking.v3.ContinuousOffCPUProfilingTask offCPU = 8;</code>
   */
  ContinuousOffCPUProfilingTaskOrBuilder getOffCPUOrBuilder();

  /**
   * <code>.skywalking.v3.ContinuousNetworkProfilingTask network = 9;</code>
   * @return Whether the network field is set.
   */
  boolean hasNetwork();
  /**
   * <code>.skywalking.v3.ContinuousNetworkProfilingTask network = 9;</code>
   * @return The network.
   */
  ContinuousNetworkProfilingTask getNetwork();
  /**
   * <code>.skywalking.v3.ContinuousNetworkProfilingTask network = 9;</code>
   */
  ContinuousNetworkProfilingTaskOrBuilder getNetworkOrBuilder();

  public ContinuousProfilingReport.TargetTaskCase getTargetTaskCase();
}
