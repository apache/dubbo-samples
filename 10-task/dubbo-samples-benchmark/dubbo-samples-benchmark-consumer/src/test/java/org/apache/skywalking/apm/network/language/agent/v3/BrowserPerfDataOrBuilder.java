// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: browser/BrowserPerf.proto

package org.apache.skywalking.apm.network.language.agent.v3;

public interface BrowserPerfDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:skywalking.v3.BrowserPerfData)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string service = 1;</code>
   * @return The service.
   */
  String getService();
  /**
   * <code>string service = 1;</code>
   * @return The bytes for service.
   */
  com.google.protobuf.ByteString
      getServiceBytes();

  /**
   * <pre>
   * Service version in browser is the Instance concept in the backend.
   * </pre>
   *
   * <code>string serviceVersion = 2;</code>
   * @return The serviceVersion.
   */
  String getServiceVersion();
  /**
   * <pre>
   * Service version in browser is the Instance concept in the backend.
   * </pre>
   *
   * <code>string serviceVersion = 2;</code>
   * @return The bytes for serviceVersion.
   */
  com.google.protobuf.ByteString
      getServiceVersionBytes();

  /**
   * <pre>
   * Perf data time, set by the backend side.
   * </pre>
   *
   * <code>int64 time = 3;</code>
   * @return The time.
   */
  long getTime();

  /**
   * <pre>
   * Page path in browser is the endpoint concept in the backend
   * Page path in the browser, mostly it is URI, without parameter
   * </pre>
   *
   * <code>string pagePath = 4;</code>
   * @return The pagePath.
   */
  String getPagePath();
  /**
   * <pre>
   * Page path in browser is the endpoint concept in the backend
   * Page path in the browser, mostly it is URI, without parameter
   * </pre>
   *
   * <code>string pagePath = 4;</code>
   * @return The bytes for pagePath.
   */
  com.google.protobuf.ByteString
      getPagePathBytes();

  /**
   * <pre>
   * Unit of all time related field should be `ms`.
   * </pre>
   *
   * <code>int32 redirectTime = 5;</code>
   * @return The redirectTime.
   */
  int getRedirectTime();

  /**
   * <pre>
   * DNS query time
   * </pre>
   *
   * <code>int32 dnsTime = 6;</code>
   * @return The dnsTime.
   */
  int getDnsTime();

  /**
   * <pre>
   * Time to first Byte
   * </pre>
   *
   * <code>int32 ttfbTime = 7;</code>
   * @return The ttfbTime.
   */
  int getTtfbTime();

  /**
   * <pre>
   *  TCP connection time
   * </pre>
   *
   * <code>int32 tcpTime = 8;</code>
   * @return The tcpTime.
   */
  int getTcpTime();

  /**
   * <pre>
   * Content transfer time
   * </pre>
   *
   * <code>int32 transTime = 9;</code>
   * @return The transTime.
   */
  int getTransTime();

  /**
   * <pre>
   * Dom parsing time
   * </pre>
   *
   * <code>int32 domAnalysisTime = 10;</code>
   * @return The domAnalysisTime.
   */
  int getDomAnalysisTime();

  /**
   * <pre>
   * First paint time or blank screen time
   * </pre>
   *
   * <code>int32 fptTime = 11;</code>
   * @return The fptTime.
   */
  int getFptTime();

  /**
   * <pre>
   * Dom ready time
   * </pre>
   *
   * <code>int32 domReadyTime = 12;</code>
   * @return The domReadyTime.
   */
  int getDomReadyTime();

  /**
   * <pre>
   * Page full load time
   * </pre>
   *
   * <code>int32 loadPageTime = 13;</code>
   * @return The loadPageTime.
   */
  int getLoadPageTime();

  /**
   * <pre>
   * Synchronous load resources in the page
   * </pre>
   *
   * <code>int32 resTime = 14;</code>
   * @return The resTime.
   */
  int getResTime();

  /**
   * <pre>
   * Only valid for HTTPS
   * </pre>
   *
   * <code>int32 sslTime = 15;</code>
   * @return The sslTime.
   */
  int getSslTime();

  /**
   * <pre>
   * Time to interact
   * </pre>
   *
   * <code>int32 ttlTime = 16;</code>
   * @return The ttlTime.
   */
  int getTtlTime();

  /**
   * <pre>
   * First pack time
   * </pre>
   *
   * <code>int32 firstPackTime = 17;</code>
   * @return The firstPackTime.
   */
  int getFirstPackTime();

  /**
   * <pre>
   * First Meaningful Paint
   * </pre>
   *
   * <code>int32 fmpTime = 18;</code>
   * @return The fmpTime.
   */
  int getFmpTime();
}
