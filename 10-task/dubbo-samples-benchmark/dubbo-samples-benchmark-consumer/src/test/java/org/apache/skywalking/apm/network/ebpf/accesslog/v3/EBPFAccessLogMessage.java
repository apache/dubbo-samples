// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebpf/accesslog.proto

package org.apache.skywalking.apm.network.ebpf.accesslog.v3;

/**
 * Protobuf type {@code skywalking.v3.EBPFAccessLogMessage}
 */
public final class EBPFAccessLogMessage extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:skywalking.v3.EBPFAccessLogMessage)
    EBPFAccessLogMessageOrBuilder {
private static final long serialVersionUID = 0L;
  // Use EBPFAccessLogMessage.newBuilder() to construct.
  private EBPFAccessLogMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private EBPFAccessLogMessage() {
    kernelLogs_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new EBPFAccessLogMessage();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private EBPFAccessLogMessage(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            EBPFAccessLogNodeInfo.Builder subBuilder = null;
            if (node_ != null) {
              subBuilder = node_.toBuilder();
            }
            node_ = input.readMessage(EBPFAccessLogNodeInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(node_);
              node_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            AccessLogConnection.Builder subBuilder = null;
            if (connection_ != null) {
              subBuilder = connection_.toBuilder();
            }
            connection_ = input.readMessage(AccessLogConnection.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(connection_);
              connection_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              kernelLogs_ = new java.util.ArrayList<AccessLogKernelLog>();
              mutable_bitField0_ |= 0x00000001;
            }
            kernelLogs_.add(
                input.readMessage(AccessLogKernelLog.parser(), extensionRegistry));
            break;
          }
          case 34: {
            AccessLogProtocolLogs.Builder subBuilder = null;
            if (protocolLog_ != null) {
              subBuilder = protocolLog_.toBuilder();
            }
            protocolLog_ = input.readMessage(AccessLogProtocolLogs.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(protocolLog_);
              protocolLog_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        kernelLogs_ = java.util.Collections.unmodifiableList(kernelLogs_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Accesslog.internal_static_skywalking_v3_EBPFAccessLogMessage_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Accesslog.internal_static_skywalking_v3_EBPFAccessLogMessage_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            EBPFAccessLogMessage.class, Builder.class);
  }

  public static final int NODE_FIELD_NUMBER = 1;
  private EBPFAccessLogNodeInfo node_;
  /**
   * <pre>
   * current node information, only not null when first message or have update
   * </pre>
   *
   * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
   * @return Whether the node field is set.
   */
  @Override
  public boolean hasNode() {
    return node_ != null;
  }
  /**
   * <pre>
   * current node information, only not null when first message or have update
   * </pre>
   *
   * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
   * @return The node.
   */
  @Override
  public EBPFAccessLogNodeInfo getNode() {
    return node_ == null ? EBPFAccessLogNodeInfo.getDefaultInstance() : node_;
  }
  /**
   * <pre>
   * current node information, only not null when first message or have update
   * </pre>
   *
   * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
   */
  @Override
  public EBPFAccessLogNodeInfoOrBuilder getNodeOrBuilder() {
    return getNode();
  }

  public static final int CONNECTION_FIELD_NUMBER = 2;
  private AccessLogConnection connection_;
  /**
   * <pre>
   * local process and remote process connection information
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
   * @return Whether the connection field is set.
   */
  @Override
  public boolean hasConnection() {
    return connection_ != null;
  }
  /**
   * <pre>
   * local process and remote process connection information
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
   * @return The connection.
   */
  @Override
  public AccessLogConnection getConnection() {
    return connection_ == null ? AccessLogConnection.getDefaultInstance() : connection_;
  }
  /**
   * <pre>
   * local process and remote process connection information
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
   */
  @Override
  public AccessLogConnectionOrBuilder getConnectionOrBuilder() {
    return getConnection();
  }

  public static final int KERNELLOGS_FIELD_NUMBER = 3;
  private java.util.List<AccessLogKernelLog> kernelLogs_;
  /**
   * <pre>
   * kernel level metrics
   * </pre>
   *
   * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
   */
  @Override
  public java.util.List<AccessLogKernelLog> getKernelLogsList() {
    return kernelLogs_;
  }
  /**
   * <pre>
   * kernel level metrics
   * </pre>
   *
   * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
   */
  @Override
  public java.util.List<? extends AccessLogKernelLogOrBuilder>
      getKernelLogsOrBuilderList() {
    return kernelLogs_;
  }
  /**
   * <pre>
   * kernel level metrics
   * </pre>
   *
   * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
   */
  @Override
  public int getKernelLogsCount() {
    return kernelLogs_.size();
  }
  /**
   * <pre>
   * kernel level metrics
   * </pre>
   *
   * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
   */
  @Override
  public AccessLogKernelLog getKernelLogs(int index) {
    return kernelLogs_.get(index);
  }
  /**
   * <pre>
   * kernel level metrics
   * </pre>
   *
   * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
   */
  @Override
  public AccessLogKernelLogOrBuilder getKernelLogsOrBuilder(
      int index) {
    return kernelLogs_.get(index);
  }

  public static final int PROTOCOLLOG_FIELD_NUMBER = 4;
  private AccessLogProtocolLogs protocolLog_;
  /**
   * <pre>
   * application protocol log
   * if the protocol is detected, the kernel logs is works the related logs
   * otherwise, the kernel log is not related and is sent periodically
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
   * @return Whether the protocolLog field is set.
   */
  @Override
  public boolean hasProtocolLog() {
    return protocolLog_ != null;
  }
  /**
   * <pre>
   * application protocol log
   * if the protocol is detected, the kernel logs is works the related logs
   * otherwise, the kernel log is not related and is sent periodically
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
   * @return The protocolLog.
   */
  @Override
  public AccessLogProtocolLogs getProtocolLog() {
    return protocolLog_ == null ? AccessLogProtocolLogs.getDefaultInstance() : protocolLog_;
  }
  /**
   * <pre>
   * application protocol log
   * if the protocol is detected, the kernel logs is works the related logs
   * otherwise, the kernel log is not related and is sent periodically
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
   */
  @Override
  public AccessLogProtocolLogsOrBuilder getProtocolLogOrBuilder() {
    return getProtocolLog();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (node_ != null) {
      output.writeMessage(1, getNode());
    }
    if (connection_ != null) {
      output.writeMessage(2, getConnection());
    }
    for (int i = 0; i < kernelLogs_.size(); i++) {
      output.writeMessage(3, kernelLogs_.get(i));
    }
    if (protocolLog_ != null) {
      output.writeMessage(4, getProtocolLog());
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (node_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getNode());
    }
    if (connection_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getConnection());
    }
    for (int i = 0; i < kernelLogs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, kernelLogs_.get(i));
    }
    if (protocolLog_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getProtocolLog());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof EBPFAccessLogMessage)) {
      return super.equals(obj);
    }
    EBPFAccessLogMessage other = (EBPFAccessLogMessage) obj;

    if (hasNode() != other.hasNode()) return false;
    if (hasNode()) {
      if (!getNode()
          .equals(other.getNode())) return false;
    }
    if (hasConnection() != other.hasConnection()) return false;
    if (hasConnection()) {
      if (!getConnection()
          .equals(other.getConnection())) return false;
    }
    if (!getKernelLogsList()
        .equals(other.getKernelLogsList())) return false;
    if (hasProtocolLog() != other.hasProtocolLog()) return false;
    if (hasProtocolLog()) {
      if (!getProtocolLog()
          .equals(other.getProtocolLog())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasNode()) {
      hash = (37 * hash) + NODE_FIELD_NUMBER;
      hash = (53 * hash) + getNode().hashCode();
    }
    if (hasConnection()) {
      hash = (37 * hash) + CONNECTION_FIELD_NUMBER;
      hash = (53 * hash) + getConnection().hashCode();
    }
    if (getKernelLogsCount() > 0) {
      hash = (37 * hash) + KERNELLOGS_FIELD_NUMBER;
      hash = (53 * hash) + getKernelLogsList().hashCode();
    }
    if (hasProtocolLog()) {
      hash = (37 * hash) + PROTOCOLLOG_FIELD_NUMBER;
      hash = (53 * hash) + getProtocolLog().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static EBPFAccessLogMessage parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static EBPFAccessLogMessage parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static EBPFAccessLogMessage parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static EBPFAccessLogMessage parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static EBPFAccessLogMessage parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static EBPFAccessLogMessage parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static EBPFAccessLogMessage parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static EBPFAccessLogMessage parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static EBPFAccessLogMessage parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static EBPFAccessLogMessage parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static EBPFAccessLogMessage parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static EBPFAccessLogMessage parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(EBPFAccessLogMessage prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code skywalking.v3.EBPFAccessLogMessage}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:skywalking.v3.EBPFAccessLogMessage)
      EBPFAccessLogMessageOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Accesslog.internal_static_skywalking_v3_EBPFAccessLogMessage_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Accesslog.internal_static_skywalking_v3_EBPFAccessLogMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              EBPFAccessLogMessage.class, Builder.class);
    }

    // Construct using org.apache.skywalking.apm.network.ebpf.accesslog.v3.EBPFAccessLogMessage.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getKernelLogsFieldBuilder();
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      if (nodeBuilder_ == null) {
        node_ = null;
      } else {
        node_ = null;
        nodeBuilder_ = null;
      }
      if (connectionBuilder_ == null) {
        connection_ = null;
      } else {
        connection_ = null;
        connectionBuilder_ = null;
      }
      if (kernelLogsBuilder_ == null) {
        kernelLogs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        kernelLogsBuilder_.clear();
      }
      if (protocolLogBuilder_ == null) {
        protocolLog_ = null;
      } else {
        protocolLog_ = null;
        protocolLogBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Accesslog.internal_static_skywalking_v3_EBPFAccessLogMessage_descriptor;
    }

    @Override
    public EBPFAccessLogMessage getDefaultInstanceForType() {
      return EBPFAccessLogMessage.getDefaultInstance();
    }

    @Override
    public EBPFAccessLogMessage build() {
      EBPFAccessLogMessage result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public EBPFAccessLogMessage buildPartial() {
      EBPFAccessLogMessage result = new EBPFAccessLogMessage(this);
      int from_bitField0_ = bitField0_;
      if (nodeBuilder_ == null) {
        result.node_ = node_;
      } else {
        result.node_ = nodeBuilder_.build();
      }
      if (connectionBuilder_ == null) {
        result.connection_ = connection_;
      } else {
        result.connection_ = connectionBuilder_.build();
      }
      if (kernelLogsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          kernelLogs_ = java.util.Collections.unmodifiableList(kernelLogs_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.kernelLogs_ = kernelLogs_;
      } else {
        result.kernelLogs_ = kernelLogsBuilder_.build();
      }
      if (protocolLogBuilder_ == null) {
        result.protocolLog_ = protocolLog_;
      } else {
        result.protocolLog_ = protocolLogBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof EBPFAccessLogMessage) {
        return mergeFrom((EBPFAccessLogMessage)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(EBPFAccessLogMessage other) {
      if (other == EBPFAccessLogMessage.getDefaultInstance()) return this;
      if (other.hasNode()) {
        mergeNode(other.getNode());
      }
      if (other.hasConnection()) {
        mergeConnection(other.getConnection());
      }
      if (kernelLogsBuilder_ == null) {
        if (!other.kernelLogs_.isEmpty()) {
          if (kernelLogs_.isEmpty()) {
            kernelLogs_ = other.kernelLogs_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureKernelLogsIsMutable();
            kernelLogs_.addAll(other.kernelLogs_);
          }
          onChanged();
        }
      } else {
        if (!other.kernelLogs_.isEmpty()) {
          if (kernelLogsBuilder_.isEmpty()) {
            kernelLogsBuilder_.dispose();
            kernelLogsBuilder_ = null;
            kernelLogs_ = other.kernelLogs_;
            bitField0_ = (bitField0_ & ~0x00000001);
            kernelLogsBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getKernelLogsFieldBuilder() : null;
          } else {
            kernelLogsBuilder_.addAllMessages(other.kernelLogs_);
          }
        }
      }
      if (other.hasProtocolLog()) {
        mergeProtocolLog(other.getProtocolLog());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      EBPFAccessLogMessage parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (EBPFAccessLogMessage) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private EBPFAccessLogNodeInfo node_;
    private com.google.protobuf.SingleFieldBuilderV3<
        EBPFAccessLogNodeInfo, EBPFAccessLogNodeInfo.Builder, EBPFAccessLogNodeInfoOrBuilder> nodeBuilder_;
    /**
     * <pre>
     * current node information, only not null when first message or have update
     * </pre>
     *
     * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
     * @return Whether the node field is set.
     */
    public boolean hasNode() {
      return nodeBuilder_ != null || node_ != null;
    }
    /**
     * <pre>
     * current node information, only not null when first message or have update
     * </pre>
     *
     * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
     * @return The node.
     */
    public EBPFAccessLogNodeInfo getNode() {
      if (nodeBuilder_ == null) {
        return node_ == null ? EBPFAccessLogNodeInfo.getDefaultInstance() : node_;
      } else {
        return nodeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * current node information, only not null when first message or have update
     * </pre>
     *
     * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
     */
    public Builder setNode(EBPFAccessLogNodeInfo value) {
      if (nodeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        node_ = value;
        onChanged();
      } else {
        nodeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * current node information, only not null when first message or have update
     * </pre>
     *
     * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
     */
    public Builder setNode(
        EBPFAccessLogNodeInfo.Builder builderForValue) {
      if (nodeBuilder_ == null) {
        node_ = builderForValue.build();
        onChanged();
      } else {
        nodeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * current node information, only not null when first message or have update
     * </pre>
     *
     * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
     */
    public Builder mergeNode(EBPFAccessLogNodeInfo value) {
      if (nodeBuilder_ == null) {
        if (node_ != null) {
          node_ =
            EBPFAccessLogNodeInfo.newBuilder(node_).mergeFrom(value).buildPartial();
        } else {
          node_ = value;
        }
        onChanged();
      } else {
        nodeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * current node information, only not null when first message or have update
     * </pre>
     *
     * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
     */
    public Builder clearNode() {
      if (nodeBuilder_ == null) {
        node_ = null;
        onChanged();
      } else {
        node_ = null;
        nodeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * current node information, only not null when first message or have update
     * </pre>
     *
     * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
     */
    public EBPFAccessLogNodeInfo.Builder getNodeBuilder() {

      onChanged();
      return getNodeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * current node information, only not null when first message or have update
     * </pre>
     *
     * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
     */
    public EBPFAccessLogNodeInfoOrBuilder getNodeOrBuilder() {
      if (nodeBuilder_ != null) {
        return nodeBuilder_.getMessageOrBuilder();
      } else {
        return node_ == null ?
            EBPFAccessLogNodeInfo.getDefaultInstance() : node_;
      }
    }
    /**
     * <pre>
     * current node information, only not null when first message or have update
     * </pre>
     *
     * <code>.skywalking.v3.EBPFAccessLogNodeInfo node = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        EBPFAccessLogNodeInfo, EBPFAccessLogNodeInfo.Builder, EBPFAccessLogNodeInfoOrBuilder>
        getNodeFieldBuilder() {
      if (nodeBuilder_ == null) {
        nodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            EBPFAccessLogNodeInfo, EBPFAccessLogNodeInfo.Builder, EBPFAccessLogNodeInfoOrBuilder>(
                getNode(),
                getParentForChildren(),
                isClean());
        node_ = null;
      }
      return nodeBuilder_;
    }

    private AccessLogConnection connection_;
    private com.google.protobuf.SingleFieldBuilderV3<
        AccessLogConnection, AccessLogConnection.Builder, AccessLogConnectionOrBuilder> connectionBuilder_;
    /**
     * <pre>
     * local process and remote process connection information
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
     * @return Whether the connection field is set.
     */
    public boolean hasConnection() {
      return connectionBuilder_ != null || connection_ != null;
    }
    /**
     * <pre>
     * local process and remote process connection information
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
     * @return The connection.
     */
    public AccessLogConnection getConnection() {
      if (connectionBuilder_ == null) {
        return connection_ == null ? AccessLogConnection.getDefaultInstance() : connection_;
      } else {
        return connectionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * local process and remote process connection information
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
     */
    public Builder setConnection(AccessLogConnection value) {
      if (connectionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        connection_ = value;
        onChanged();
      } else {
        connectionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * local process and remote process connection information
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
     */
    public Builder setConnection(
        AccessLogConnection.Builder builderForValue) {
      if (connectionBuilder_ == null) {
        connection_ = builderForValue.build();
        onChanged();
      } else {
        connectionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * local process and remote process connection information
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
     */
    public Builder mergeConnection(AccessLogConnection value) {
      if (connectionBuilder_ == null) {
        if (connection_ != null) {
          connection_ =
            AccessLogConnection.newBuilder(connection_).mergeFrom(value).buildPartial();
        } else {
          connection_ = value;
        }
        onChanged();
      } else {
        connectionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * local process and remote process connection information
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
     */
    public Builder clearConnection() {
      if (connectionBuilder_ == null) {
        connection_ = null;
        onChanged();
      } else {
        connection_ = null;
        connectionBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * local process and remote process connection information
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
     */
    public AccessLogConnection.Builder getConnectionBuilder() {

      onChanged();
      return getConnectionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * local process and remote process connection information
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
     */
    public AccessLogConnectionOrBuilder getConnectionOrBuilder() {
      if (connectionBuilder_ != null) {
        return connectionBuilder_.getMessageOrBuilder();
      } else {
        return connection_ == null ?
            AccessLogConnection.getDefaultInstance() : connection_;
      }
    }
    /**
     * <pre>
     * local process and remote process connection information
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogConnection connection = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        AccessLogConnection, AccessLogConnection.Builder, AccessLogConnectionOrBuilder>
        getConnectionFieldBuilder() {
      if (connectionBuilder_ == null) {
        connectionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            AccessLogConnection, AccessLogConnection.Builder, AccessLogConnectionOrBuilder>(
                getConnection(),
                getParentForChildren(),
                isClean());
        connection_ = null;
      }
      return connectionBuilder_;
    }

    private java.util.List<AccessLogKernelLog> kernelLogs_ =
      java.util.Collections.emptyList();
    private void ensureKernelLogsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        kernelLogs_ = new java.util.ArrayList<AccessLogKernelLog>(kernelLogs_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        AccessLogKernelLog, AccessLogKernelLog.Builder, AccessLogKernelLogOrBuilder> kernelLogsBuilder_;

    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public java.util.List<AccessLogKernelLog> getKernelLogsList() {
      if (kernelLogsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(kernelLogs_);
      } else {
        return kernelLogsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public int getKernelLogsCount() {
      if (kernelLogsBuilder_ == null) {
        return kernelLogs_.size();
      } else {
        return kernelLogsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public AccessLogKernelLog getKernelLogs(int index) {
      if (kernelLogsBuilder_ == null) {
        return kernelLogs_.get(index);
      } else {
        return kernelLogsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public Builder setKernelLogs(
        int index, AccessLogKernelLog value) {
      if (kernelLogsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureKernelLogsIsMutable();
        kernelLogs_.set(index, value);
        onChanged();
      } else {
        kernelLogsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public Builder setKernelLogs(
        int index, AccessLogKernelLog.Builder builderForValue) {
      if (kernelLogsBuilder_ == null) {
        ensureKernelLogsIsMutable();
        kernelLogs_.set(index, builderForValue.build());
        onChanged();
      } else {
        kernelLogsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public Builder addKernelLogs(AccessLogKernelLog value) {
      if (kernelLogsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureKernelLogsIsMutable();
        kernelLogs_.add(value);
        onChanged();
      } else {
        kernelLogsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public Builder addKernelLogs(
        int index, AccessLogKernelLog value) {
      if (kernelLogsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureKernelLogsIsMutable();
        kernelLogs_.add(index, value);
        onChanged();
      } else {
        kernelLogsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public Builder addKernelLogs(
        AccessLogKernelLog.Builder builderForValue) {
      if (kernelLogsBuilder_ == null) {
        ensureKernelLogsIsMutable();
        kernelLogs_.add(builderForValue.build());
        onChanged();
      } else {
        kernelLogsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public Builder addKernelLogs(
        int index, AccessLogKernelLog.Builder builderForValue) {
      if (kernelLogsBuilder_ == null) {
        ensureKernelLogsIsMutable();
        kernelLogs_.add(index, builderForValue.build());
        onChanged();
      } else {
        kernelLogsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public Builder addAllKernelLogs(
        Iterable<? extends AccessLogKernelLog> values) {
      if (kernelLogsBuilder_ == null) {
        ensureKernelLogsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, kernelLogs_);
        onChanged();
      } else {
        kernelLogsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public Builder clearKernelLogs() {
      if (kernelLogsBuilder_ == null) {
        kernelLogs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        kernelLogsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public Builder removeKernelLogs(int index) {
      if (kernelLogsBuilder_ == null) {
        ensureKernelLogsIsMutable();
        kernelLogs_.remove(index);
        onChanged();
      } else {
        kernelLogsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public AccessLogKernelLog.Builder getKernelLogsBuilder(
        int index) {
      return getKernelLogsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public AccessLogKernelLogOrBuilder getKernelLogsOrBuilder(
        int index) {
      if (kernelLogsBuilder_ == null) {
        return kernelLogs_.get(index);  } else {
        return kernelLogsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public java.util.List<? extends AccessLogKernelLogOrBuilder>
         getKernelLogsOrBuilderList() {
      if (kernelLogsBuilder_ != null) {
        return kernelLogsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(kernelLogs_);
      }
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public AccessLogKernelLog.Builder addKernelLogsBuilder() {
      return getKernelLogsFieldBuilder().addBuilder(
          AccessLogKernelLog.getDefaultInstance());
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public AccessLogKernelLog.Builder addKernelLogsBuilder(
        int index) {
      return getKernelLogsFieldBuilder().addBuilder(
          index, AccessLogKernelLog.getDefaultInstance());
    }
    /**
     * <pre>
     * kernel level metrics
     * </pre>
     *
     * <code>repeated .skywalking.v3.AccessLogKernelLog kernelLogs = 3;</code>
     */
    public java.util.List<AccessLogKernelLog.Builder>
         getKernelLogsBuilderList() {
      return getKernelLogsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        AccessLogKernelLog, AccessLogKernelLog.Builder, AccessLogKernelLogOrBuilder>
        getKernelLogsFieldBuilder() {
      if (kernelLogsBuilder_ == null) {
        kernelLogsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            AccessLogKernelLog, AccessLogKernelLog.Builder, AccessLogKernelLogOrBuilder>(
                kernelLogs_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        kernelLogs_ = null;
      }
      return kernelLogsBuilder_;
    }

    private AccessLogProtocolLogs protocolLog_;
    private com.google.protobuf.SingleFieldBuilderV3<
        AccessLogProtocolLogs, AccessLogProtocolLogs.Builder, AccessLogProtocolLogsOrBuilder> protocolLogBuilder_;
    /**
     * <pre>
     * application protocol log
     * if the protocol is detected, the kernel logs is works the related logs
     * otherwise, the kernel log is not related and is sent periodically
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
     * @return Whether the protocolLog field is set.
     */
    public boolean hasProtocolLog() {
      return protocolLogBuilder_ != null || protocolLog_ != null;
    }
    /**
     * <pre>
     * application protocol log
     * if the protocol is detected, the kernel logs is works the related logs
     * otherwise, the kernel log is not related and is sent periodically
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
     * @return The protocolLog.
     */
    public AccessLogProtocolLogs getProtocolLog() {
      if (protocolLogBuilder_ == null) {
        return protocolLog_ == null ? AccessLogProtocolLogs.getDefaultInstance() : protocolLog_;
      } else {
        return protocolLogBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * application protocol log
     * if the protocol is detected, the kernel logs is works the related logs
     * otherwise, the kernel log is not related and is sent periodically
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
     */
    public Builder setProtocolLog(AccessLogProtocolLogs value) {
      if (protocolLogBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        protocolLog_ = value;
        onChanged();
      } else {
        protocolLogBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * application protocol log
     * if the protocol is detected, the kernel logs is works the related logs
     * otherwise, the kernel log is not related and is sent periodically
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
     */
    public Builder setProtocolLog(
        AccessLogProtocolLogs.Builder builderForValue) {
      if (protocolLogBuilder_ == null) {
        protocolLog_ = builderForValue.build();
        onChanged();
      } else {
        protocolLogBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * application protocol log
     * if the protocol is detected, the kernel logs is works the related logs
     * otherwise, the kernel log is not related and is sent periodically
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
     */
    public Builder mergeProtocolLog(AccessLogProtocolLogs value) {
      if (protocolLogBuilder_ == null) {
        if (protocolLog_ != null) {
          protocolLog_ =
            AccessLogProtocolLogs.newBuilder(protocolLog_).mergeFrom(value).buildPartial();
        } else {
          protocolLog_ = value;
        }
        onChanged();
      } else {
        protocolLogBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * application protocol log
     * if the protocol is detected, the kernel logs is works the related logs
     * otherwise, the kernel log is not related and is sent periodically
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
     */
    public Builder clearProtocolLog() {
      if (protocolLogBuilder_ == null) {
        protocolLog_ = null;
        onChanged();
      } else {
        protocolLog_ = null;
        protocolLogBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * application protocol log
     * if the protocol is detected, the kernel logs is works the related logs
     * otherwise, the kernel log is not related and is sent periodically
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
     */
    public AccessLogProtocolLogs.Builder getProtocolLogBuilder() {

      onChanged();
      return getProtocolLogFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * application protocol log
     * if the protocol is detected, the kernel logs is works the related logs
     * otherwise, the kernel log is not related and is sent periodically
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
     */
    public AccessLogProtocolLogsOrBuilder getProtocolLogOrBuilder() {
      if (protocolLogBuilder_ != null) {
        return protocolLogBuilder_.getMessageOrBuilder();
      } else {
        return protocolLog_ == null ?
            AccessLogProtocolLogs.getDefaultInstance() : protocolLog_;
      }
    }
    /**
     * <pre>
     * application protocol log
     * if the protocol is detected, the kernel logs is works the related logs
     * otherwise, the kernel log is not related and is sent periodically
     * </pre>
     *
     * <code>.skywalking.v3.AccessLogProtocolLogs protocolLog = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        AccessLogProtocolLogs, AccessLogProtocolLogs.Builder, AccessLogProtocolLogsOrBuilder>
        getProtocolLogFieldBuilder() {
      if (protocolLogBuilder_ == null) {
        protocolLogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            AccessLogProtocolLogs, AccessLogProtocolLogs.Builder, AccessLogProtocolLogsOrBuilder>(
                getProtocolLog(),
                getParentForChildren(),
                isClean());
        protocolLog_ = null;
      }
      return protocolLogBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:skywalking.v3.EBPFAccessLogMessage)
  }

  // @@protoc_insertion_point(class_scope:skywalking.v3.EBPFAccessLogMessage)
  private static final EBPFAccessLogMessage DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new EBPFAccessLogMessage();
  }

  public static EBPFAccessLogMessage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<EBPFAccessLogMessage>
      PARSER = new com.google.protobuf.AbstractParser<EBPFAccessLogMessage>() {
    @Override
    public EBPFAccessLogMessage parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new EBPFAccessLogMessage(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<EBPFAccessLogMessage> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<EBPFAccessLogMessage> getParserForType() {
    return PARSER;
  }

  @Override
  public EBPFAccessLogMessage getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

