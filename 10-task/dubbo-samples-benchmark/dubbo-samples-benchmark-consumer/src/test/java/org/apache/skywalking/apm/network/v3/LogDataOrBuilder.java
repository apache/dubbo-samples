// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging/Logging.proto

package org.apache.skywalking.apm.network.v3;

public interface LogDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:skywalking.v3.LogData)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * [Optional] The timestamp of the log, in millisecond.
   * If not set, OAP server would use the received timestamp as log's timestamp, or relies on the OAP server analyzer.
   * </pre>
   *
   * <code>int64 timestamp = 1;</code>
   * @return The timestamp.
   */
  long getTimestamp();

  /**
   * <pre>
   * [Required] **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
   * The logic name represents the service. This would show as a separate node in the topology.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
   * If this is not the first element of the streaming, use the previous not-null name as the service name.
   * </pre>
   *
   * <code>string service = 2;</code>
   * @return The service.
   */
  String getService();
  /**
   * <pre>
   * [Required] **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
   * The logic name represents the service. This would show as a separate node in the topology.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
   * If this is not the first element of the streaming, use the previous not-null name as the service name.
   * </pre>
   *
   * <code>string service = 2;</code>
   * @return The bytes for service.
   */
  com.google.protobuf.ByteString
      getServiceBytes();

  /**
   * <pre>
   * [Optional] **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
   * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
   * The logic name represents the service instance. This would show as a separate node in the instance relationship.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
   * </pre>
   *
   * <code>string serviceInstance = 3;</code>
   * @return The serviceInstance.
   */
  String getServiceInstance();
  /**
   * <pre>
   * [Optional] **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
   * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
   * The logic name represents the service instance. This would show as a separate node in the instance relationship.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
   * </pre>
   *
   * <code>string serviceInstance = 3;</code>
   * @return The bytes for serviceInstance.
   */
  com.google.protobuf.ByteString
      getServiceInstanceBytes();

  /**
   * <pre>
   * [Optional] **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
   * The logic name represents the endpoint, which logs belong.
   * </pre>
   *
   * <code>string endpoint = 4;</code>
   * @return The endpoint.
   */
  String getEndpoint();
  /**
   * <pre>
   * [Optional] **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
   * The logic name represents the endpoint, which logs belong.
   * </pre>
   *
   * <code>string endpoint = 4;</code>
   * @return The bytes for endpoint.
   */
  com.google.protobuf.ByteString
      getEndpointBytes();

  /**
   * <pre>
   * [Required] The content of the log.
   * </pre>
   *
   * <code>.skywalking.v3.LogDataBody body = 5;</code>
   * @return Whether the body field is set.
   */
  boolean hasBody();
  /**
   * <pre>
   * [Required] The content of the log.
   * </pre>
   *
   * <code>.skywalking.v3.LogDataBody body = 5;</code>
   * @return The body.
   */
  org.apache.skywalking.apm.network.logging.v3.LogDataBody getBody();
  /**
   * <pre>
   * [Required] The content of the log.
   * </pre>
   *
   * <code>.skywalking.v3.LogDataBody body = 5;</code>
   */
  org.apache.skywalking.apm.network.logging.v3.LogDataBodyOrBuilder getBodyOrBuilder();

  /**
   * <pre>
   * [Optional] Logs with trace context
   * </pre>
   *
   * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
   * @return Whether the traceContext field is set.
   */
  boolean hasTraceContext();
  /**
   * <pre>
   * [Optional] Logs with trace context
   * </pre>
   *
   * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
   * @return The traceContext.
   */
  org.apache.skywalking.apm.network.logging.v3.TraceContext getTraceContext();
  /**
   * <pre>
   * [Optional] Logs with trace context
   * </pre>
   *
   * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
   */
  org.apache.skywalking.apm.network.logging.v3.TraceContextOrBuilder getTraceContextOrBuilder();

  /**
   * <pre>
   * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
   * </pre>
   *
   * <code>.skywalking.v3.LogTags tags = 7;</code>
   * @return Whether the tags field is set.
   */
  boolean hasTags();
  /**
   * <pre>
   * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
   * </pre>
   *
   * <code>.skywalking.v3.LogTags tags = 7;</code>
   * @return The tags.
   */
  org.apache.skywalking.apm.network.logging.v3.LogTags getTags();
  /**
   * <pre>
   * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
   * </pre>
   *
   * <code>.skywalking.v3.LogTags tags = 7;</code>
   */
  org.apache.skywalking.apm.network.logging.v3.LogTagsOrBuilder getTagsOrBuilder();

  /**
   * <pre>
   * [Optional] Since 9.0.0
   * The layer of the service and servce instance. If absent, the OAP would set `layer`=`ID: 2, NAME: general`
   * </pre>
   *
   * <code>string layer = 8;</code>
   * @return The layer.
   */
  String getLayer();
  /**
   * <pre>
   * [Optional] Since 9.0.0
   * The layer of the service and servce instance. If absent, the OAP would set `layer`=`ID: 2, NAME: general`
   * </pre>
   *
   * <code>string layer = 8;</code>
   * @return The bytes for layer.
   */
  com.google.protobuf.ByteString
      getLayerBytes();
}
