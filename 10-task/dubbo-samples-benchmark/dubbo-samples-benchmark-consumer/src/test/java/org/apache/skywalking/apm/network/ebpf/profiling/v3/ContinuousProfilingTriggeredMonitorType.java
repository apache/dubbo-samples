// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebpf/profiling/Continuous.proto

package org.apache.skywalking.apm.network.ebpf.profiling.v3;

/**
 * Protobuf enum {@code skywalking.v3.ContinuousProfilingTriggeredMonitorType}
 */
public enum ContinuousProfilingTriggeredMonitorType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Current process CPU usage percent(0-100).
   * </pre>
   *
   * <code>ProcessCPU = 0;</code>
   */
  ProcessCPU(0),
  /**
   * <pre>
   * The number of threads in the process.
   * </pre>
   *
   * <code>ProcessThreadCount = 1;</code>
   */
  ProcessThreadCount(1),
  /**
   * <pre>
   * System load value.
   * </pre>
   *
   * <code>SystemLoad = 2;</code>
   */
  SystemLoad(2),
  /**
   * <pre>
   * Process response error rate(0-100).
   * HTTP response codes in [500-600) are considered errors.
   * Formula: ErrorCount / TotalCount * 100
   * </pre>
   *
   * <code>HTTPErrorRate = 3;</code>
   */
  HTTPErrorRate(3),
  /**
   * <pre>
   * Process response average time(ms).
   * Formula: TotalResponseTime(ms) / TotalCount
   * </pre>
   *
   * <code>HTTPAvgResponseTime = 4;</code>
   */
  HTTPAvgResponseTime(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Current process CPU usage percent(0-100).
   * </pre>
   *
   * <code>ProcessCPU = 0;</code>
   */
  public static final int ProcessCPU_VALUE = 0;
  /**
   * <pre>
   * The number of threads in the process.
   * </pre>
   *
   * <code>ProcessThreadCount = 1;</code>
   */
  public static final int ProcessThreadCount_VALUE = 1;
  /**
   * <pre>
   * System load value.
   * </pre>
   *
   * <code>SystemLoad = 2;</code>
   */
  public static final int SystemLoad_VALUE = 2;
  /**
   * <pre>
   * Process response error rate(0-100).
   * HTTP response codes in [500-600) are considered errors.
   * Formula: ErrorCount / TotalCount * 100
   * </pre>
   *
   * <code>HTTPErrorRate = 3;</code>
   */
  public static final int HTTPErrorRate_VALUE = 3;
  /**
   * <pre>
   * Process response average time(ms).
   * Formula: TotalResponseTime(ms) / TotalCount
   * </pre>
   *
   * <code>HTTPAvgResponseTime = 4;</code>
   */
  public static final int HTTPAvgResponseTime_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static ContinuousProfilingTriggeredMonitorType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ContinuousProfilingTriggeredMonitorType forNumber(int value) {
    switch (value) {
      case 0: return ProcessCPU;
      case 1: return ProcessThreadCount;
      case 2: return SystemLoad;
      case 3: return HTTPErrorRate;
      case 4: return HTTPAvgResponseTime;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ContinuousProfilingTriggeredMonitorType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ContinuousProfilingTriggeredMonitorType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ContinuousProfilingTriggeredMonitorType>() {
          public ContinuousProfilingTriggeredMonitorType findValueByNumber(int number) {
            return ContinuousProfilingTriggeredMonitorType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return Continuous.getDescriptor().getEnumTypes().get(0);
  }

  private static final ContinuousProfilingTriggeredMonitorType[] VALUES = values();

  public static ContinuousProfilingTriggeredMonitorType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ContinuousProfilingTriggeredMonitorType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:skywalking.v3.ContinuousProfilingTriggeredMonitorType)
}

