// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent/Meter.proto

package org.apache.skywalking.apm.network.language.agent.v3;

/**
 * <pre>
 * Histogram
 * </pre>
 *
 * Protobuf type {@code skywalking.v3.MeterHistogram}
 */
public final class MeterHistogram extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:skywalking.v3.MeterHistogram)
    MeterHistogramOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MeterHistogram.newBuilder() to construct.
  private MeterHistogram(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MeterHistogram() {
    name_ = "";
    labels_ = java.util.Collections.emptyList();
    values_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new MeterHistogram();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private MeterHistogram(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              labels_ = new java.util.ArrayList<Label>();
              mutable_bitField0_ |= 0x00000001;
            }
            labels_.add(
                input.readMessage(Label.parser(), extensionRegistry));
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              values_ = new java.util.ArrayList<MeterBucketValue>();
              mutable_bitField0_ |= 0x00000002;
            }
            values_.add(
                input.readMessage(MeterBucketValue.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        labels_ = java.util.Collections.unmodifiableList(labels_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        values_ = java.util.Collections.unmodifiableList(values_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Meter.internal_static_skywalking_v3_MeterHistogram_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Meter.internal_static_skywalking_v3_MeterHistogram_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            MeterHistogram.class, Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private volatile Object name_;
  /**
   * <pre>
   * Meter name
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @Override
  public String getName() {
    Object ref = name_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Meter name
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    Object ref = name_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LABELS_FIELD_NUMBER = 2;
  private java.util.List<Label> labels_;
  /**
   * <pre>
   * Labels
   * </pre>
   *
   * <code>repeated .skywalking.v3.Label labels = 2;</code>
   */
  @Override
  public java.util.List<Label> getLabelsList() {
    return labels_;
  }
  /**
   * <pre>
   * Labels
   * </pre>
   *
   * <code>repeated .skywalking.v3.Label labels = 2;</code>
   */
  @Override
  public java.util.List<? extends LabelOrBuilder>
      getLabelsOrBuilderList() {
    return labels_;
  }
  /**
   * <pre>
   * Labels
   * </pre>
   *
   * <code>repeated .skywalking.v3.Label labels = 2;</code>
   */
  @Override
  public int getLabelsCount() {
    return labels_.size();
  }
  /**
   * <pre>
   * Labels
   * </pre>
   *
   * <code>repeated .skywalking.v3.Label labels = 2;</code>
   */
  @Override
  public Label getLabels(int index) {
    return labels_.get(index);
  }
  /**
   * <pre>
   * Labels
   * </pre>
   *
   * <code>repeated .skywalking.v3.Label labels = 2;</code>
   */
  @Override
  public LabelOrBuilder getLabelsOrBuilder(
      int index) {
    return labels_.get(index);
  }

  public static final int VALUES_FIELD_NUMBER = 3;
  private java.util.List<MeterBucketValue> values_;
  /**
   * <pre>
   * Customize the buckets
   * </pre>
   *
   * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
   */
  @Override
  public java.util.List<MeterBucketValue> getValuesList() {
    return values_;
  }
  /**
   * <pre>
   * Customize the buckets
   * </pre>
   *
   * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
   */
  @Override
  public java.util.List<? extends MeterBucketValueOrBuilder>
      getValuesOrBuilderList() {
    return values_;
  }
  /**
   * <pre>
   * Customize the buckets
   * </pre>
   *
   * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
   */
  @Override
  public int getValuesCount() {
    return values_.size();
  }
  /**
   * <pre>
   * Customize the buckets
   * </pre>
   *
   * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
   */
  @Override
  public MeterBucketValue getValues(int index) {
    return values_.get(index);
  }
  /**
   * <pre>
   * Customize the buckets
   * </pre>
   *
   * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
   */
  @Override
  public MeterBucketValueOrBuilder getValuesOrBuilder(
      int index) {
    return values_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    for (int i = 0; i < labels_.size(); i++) {
      output.writeMessage(2, labels_.get(i));
    }
    for (int i = 0; i < values_.size(); i++) {
      output.writeMessage(3, values_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    for (int i = 0; i < labels_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, labels_.get(i));
    }
    for (int i = 0; i < values_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, values_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof MeterHistogram)) {
      return super.equals(obj);
    }
    MeterHistogram other = (MeterHistogram) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (!getLabelsList()
        .equals(other.getLabelsList())) return false;
    if (!getValuesList()
        .equals(other.getValuesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (getLabelsCount() > 0) {
      hash = (37 * hash) + LABELS_FIELD_NUMBER;
      hash = (53 * hash) + getLabelsList().hashCode();
    }
    if (getValuesCount() > 0) {
      hash = (37 * hash) + VALUES_FIELD_NUMBER;
      hash = (53 * hash) + getValuesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static MeterHistogram parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static MeterHistogram parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static MeterHistogram parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static MeterHistogram parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static MeterHistogram parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static MeterHistogram parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static MeterHistogram parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static MeterHistogram parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static MeterHistogram parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static MeterHistogram parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static MeterHistogram parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static MeterHistogram parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(MeterHistogram prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Histogram
   * </pre>
   *
   * Protobuf type {@code skywalking.v3.MeterHistogram}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:skywalking.v3.MeterHistogram)
      MeterHistogramOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Meter.internal_static_skywalking_v3_MeterHistogram_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Meter.internal_static_skywalking_v3_MeterHistogram_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MeterHistogram.class, Builder.class);
    }

    // Construct using org.apache.skywalking.apm.network.language.agent.v3.MeterHistogram.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getLabelsFieldBuilder();
        getValuesFieldBuilder();
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      name_ = "";

      if (labelsBuilder_ == null) {
        labels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        labelsBuilder_.clear();
      }
      if (valuesBuilder_ == null) {
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        valuesBuilder_.clear();
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Meter.internal_static_skywalking_v3_MeterHistogram_descriptor;
    }

    @Override
    public MeterHistogram getDefaultInstanceForType() {
      return MeterHistogram.getDefaultInstance();
    }

    @Override
    public MeterHistogram build() {
      MeterHistogram result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public MeterHistogram buildPartial() {
      MeterHistogram result = new MeterHistogram(this);
      int from_bitField0_ = bitField0_;
      result.name_ = name_;
      if (labelsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          labels_ = java.util.Collections.unmodifiableList(labels_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.labels_ = labels_;
      } else {
        result.labels_ = labelsBuilder_.build();
      }
      if (valuesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          values_ = java.util.Collections.unmodifiableList(values_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.values_ = values_;
      } else {
        result.values_ = valuesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof MeterHistogram) {
        return mergeFrom((MeterHistogram)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(MeterHistogram other) {
      if (other == MeterHistogram.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (labelsBuilder_ == null) {
        if (!other.labels_.isEmpty()) {
          if (labels_.isEmpty()) {
            labels_ = other.labels_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureLabelsIsMutable();
            labels_.addAll(other.labels_);
          }
          onChanged();
        }
      } else {
        if (!other.labels_.isEmpty()) {
          if (labelsBuilder_.isEmpty()) {
            labelsBuilder_.dispose();
            labelsBuilder_ = null;
            labels_ = other.labels_;
            bitField0_ = (bitField0_ & ~0x00000001);
            labelsBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getLabelsFieldBuilder() : null;
          } else {
            labelsBuilder_.addAllMessages(other.labels_);
          }
        }
      }
      if (valuesBuilder_ == null) {
        if (!other.values_.isEmpty()) {
          if (values_.isEmpty()) {
            values_ = other.values_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureValuesIsMutable();
            values_.addAll(other.values_);
          }
          onChanged();
        }
      } else {
        if (!other.values_.isEmpty()) {
          if (valuesBuilder_.isEmpty()) {
            valuesBuilder_.dispose();
            valuesBuilder_ = null;
            values_ = other.values_;
            bitField0_ = (bitField0_ & ~0x00000002);
            valuesBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getValuesFieldBuilder() : null;
          } else {
            valuesBuilder_.addAllMessages(other.values_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      MeterHistogram parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (MeterHistogram) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private Object name_ = "";
    /**
     * <pre>
     * Meter name
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    public String getName() {
      Object ref = name_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Meter name
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Meter name
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Meter name
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {

      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Meter name
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      name_ = value;
      onChanged();
      return this;
    }

    private java.util.List<Label> labels_ =
      java.util.Collections.emptyList();
    private void ensureLabelsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        labels_ = new java.util.ArrayList<Label>(labels_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        Label, Label.Builder, LabelOrBuilder> labelsBuilder_;

    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public java.util.List<Label> getLabelsList() {
      if (labelsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(labels_);
      } else {
        return labelsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public int getLabelsCount() {
      if (labelsBuilder_ == null) {
        return labels_.size();
      } else {
        return labelsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Label getLabels(int index) {
      if (labelsBuilder_ == null) {
        return labels_.get(index);
      } else {
        return labelsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Builder setLabels(
        int index, Label value) {
      if (labelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLabelsIsMutable();
        labels_.set(index, value);
        onChanged();
      } else {
        labelsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Builder setLabels(
        int index, Label.Builder builderForValue) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.set(index, builderForValue.build());
        onChanged();
      } else {
        labelsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Builder addLabels(Label value) {
      if (labelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLabelsIsMutable();
        labels_.add(value);
        onChanged();
      } else {
        labelsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Builder addLabels(
        int index, Label value) {
      if (labelsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLabelsIsMutable();
        labels_.add(index, value);
        onChanged();
      } else {
        labelsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Builder addLabels(
        Label.Builder builderForValue) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.add(builderForValue.build());
        onChanged();
      } else {
        labelsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Builder addLabels(
        int index, Label.Builder builderForValue) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.add(index, builderForValue.build());
        onChanged();
      } else {
        labelsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Builder addAllLabels(
        Iterable<? extends Label> values) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, labels_);
        onChanged();
      } else {
        labelsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Builder clearLabels() {
      if (labelsBuilder_ == null) {
        labels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        labelsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Builder removeLabels(int index) {
      if (labelsBuilder_ == null) {
        ensureLabelsIsMutable();
        labels_.remove(index);
        onChanged();
      } else {
        labelsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Label.Builder getLabelsBuilder(
        int index) {
      return getLabelsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public LabelOrBuilder getLabelsOrBuilder(
        int index) {
      if (labelsBuilder_ == null) {
        return labels_.get(index);  } else {
        return labelsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public java.util.List<? extends LabelOrBuilder>
         getLabelsOrBuilderList() {
      if (labelsBuilder_ != null) {
        return labelsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(labels_);
      }
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Label.Builder addLabelsBuilder() {
      return getLabelsFieldBuilder().addBuilder(
          Label.getDefaultInstance());
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public Label.Builder addLabelsBuilder(
        int index) {
      return getLabelsFieldBuilder().addBuilder(
          index, Label.getDefaultInstance());
    }
    /**
     * <pre>
     * Labels
     * </pre>
     *
     * <code>repeated .skywalking.v3.Label labels = 2;</code>
     */
    public java.util.List<Label.Builder>
         getLabelsBuilderList() {
      return getLabelsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        Label, Label.Builder, LabelOrBuilder>
        getLabelsFieldBuilder() {
      if (labelsBuilder_ == null) {
        labelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            Label, Label.Builder, LabelOrBuilder>(
                labels_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        labels_ = null;
      }
      return labelsBuilder_;
    }

    private java.util.List<MeterBucketValue> values_ =
      java.util.Collections.emptyList();
    private void ensureValuesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        values_ = new java.util.ArrayList<MeterBucketValue>(values_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        MeterBucketValue, MeterBucketValue.Builder, MeterBucketValueOrBuilder> valuesBuilder_;

    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public java.util.List<MeterBucketValue> getValuesList() {
      if (valuesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(values_);
      } else {
        return valuesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public int getValuesCount() {
      if (valuesBuilder_ == null) {
        return values_.size();
      } else {
        return valuesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public MeterBucketValue getValues(int index) {
      if (valuesBuilder_ == null) {
        return values_.get(index);
      } else {
        return valuesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public Builder setValues(
        int index, MeterBucketValue value) {
      if (valuesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureValuesIsMutable();
        values_.set(index, value);
        onChanged();
      } else {
        valuesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public Builder setValues(
        int index, MeterBucketValue.Builder builderForValue) {
      if (valuesBuilder_ == null) {
        ensureValuesIsMutable();
        values_.set(index, builderForValue.build());
        onChanged();
      } else {
        valuesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public Builder addValues(MeterBucketValue value) {
      if (valuesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureValuesIsMutable();
        values_.add(value);
        onChanged();
      } else {
        valuesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public Builder addValues(
        int index, MeterBucketValue value) {
      if (valuesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureValuesIsMutable();
        values_.add(index, value);
        onChanged();
      } else {
        valuesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public Builder addValues(
        MeterBucketValue.Builder builderForValue) {
      if (valuesBuilder_ == null) {
        ensureValuesIsMutable();
        values_.add(builderForValue.build());
        onChanged();
      } else {
        valuesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public Builder addValues(
        int index, MeterBucketValue.Builder builderForValue) {
      if (valuesBuilder_ == null) {
        ensureValuesIsMutable();
        values_.add(index, builderForValue.build());
        onChanged();
      } else {
        valuesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public Builder addAllValues(
        Iterable<? extends MeterBucketValue> values) {
      if (valuesBuilder_ == null) {
        ensureValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, values_);
        onChanged();
      } else {
        valuesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public Builder clearValues() {
      if (valuesBuilder_ == null) {
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        valuesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public Builder removeValues(int index) {
      if (valuesBuilder_ == null) {
        ensureValuesIsMutable();
        values_.remove(index);
        onChanged();
      } else {
        valuesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public MeterBucketValue.Builder getValuesBuilder(
        int index) {
      return getValuesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public MeterBucketValueOrBuilder getValuesOrBuilder(
        int index) {
      if (valuesBuilder_ == null) {
        return values_.get(index);  } else {
        return valuesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public java.util.List<? extends MeterBucketValueOrBuilder>
         getValuesOrBuilderList() {
      if (valuesBuilder_ != null) {
        return valuesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(values_);
      }
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public MeterBucketValue.Builder addValuesBuilder() {
      return getValuesFieldBuilder().addBuilder(
          MeterBucketValue.getDefaultInstance());
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public MeterBucketValue.Builder addValuesBuilder(
        int index) {
      return getValuesFieldBuilder().addBuilder(
          index, MeterBucketValue.getDefaultInstance());
    }
    /**
     * <pre>
     * Customize the buckets
     * </pre>
     *
     * <code>repeated .skywalking.v3.MeterBucketValue values = 3;</code>
     */
    public java.util.List<MeterBucketValue.Builder>
         getValuesBuilderList() {
      return getValuesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        MeterBucketValue, MeterBucketValue.Builder, MeterBucketValueOrBuilder>
        getValuesFieldBuilder() {
      if (valuesBuilder_ == null) {
        valuesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            MeterBucketValue, MeterBucketValue.Builder, MeterBucketValueOrBuilder>(
                values_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        values_ = null;
      }
      return valuesBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:skywalking.v3.MeterHistogram)
  }

  // @@protoc_insertion_point(class_scope:skywalking.v3.MeterHistogram)
  private static final MeterHistogram DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new MeterHistogram();
  }

  public static MeterHistogram getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MeterHistogram>
      PARSER = new com.google.protobuf.AbstractParser<MeterHistogram>() {
    @Override
    public MeterHistogram parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new MeterHistogram(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<MeterHistogram> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<MeterHistogram> getParserForType() {
    return PARSER;
  }

  @Override
  public MeterHistogram getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

