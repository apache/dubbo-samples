// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebpf/accesslog.proto

package org.apache.skywalking.apm.network.ebpf.accesslog.v3;

public interface ConnectionAddressOrBuilder extends
    // @@protoc_insertion_point(interface_extends:skywalking.v3.ConnectionAddress)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * if the address is monitored under the local machine, then return the kubernetes
   * </pre>
   *
   * <code>.skywalking.v3.KubernetesProcessAddress kubernetes = 1;</code>
   * @return Whether the kubernetes field is set.
   */
  boolean hasKubernetes();
  /**
   * <pre>
   * if the address is monitored under the local machine, then return the kubernetes
   * </pre>
   *
   * <code>.skywalking.v3.KubernetesProcessAddress kubernetes = 1;</code>
   * @return The kubernetes.
   */
  KubernetesProcessAddress getKubernetes();
  /**
   * <pre>
   * if the address is monitored under the local machine, then return the kubernetes
   * </pre>
   *
   * <code>.skywalking.v3.KubernetesProcessAddress kubernetes = 1;</code>
   */
  KubernetesProcessAddressOrBuilder getKubernetesOrBuilder();

  /**
   * <pre>
   * if the address cannot be aware, then return the ip address
   * </pre>
   *
   * <code>.skywalking.v3.IPAddress ip = 2;</code>
   * @return Whether the ip field is set.
   */
  boolean hasIp();
  /**
   * <pre>
   * if the address cannot be aware, then return the ip address
   * </pre>
   *
   * <code>.skywalking.v3.IPAddress ip = 2;</code>
   * @return The ip.
   */
  IPAddress getIp();
  /**
   * <pre>
   * if the address cannot be aware, then return the ip address
   * </pre>
   *
   * <code>.skywalking.v3.IPAddress ip = 2;</code>
   */
  IPAddressOrBuilder getIpOrBuilder();

  public ConnectionAddress.AddressCase getAddressCase();
}
