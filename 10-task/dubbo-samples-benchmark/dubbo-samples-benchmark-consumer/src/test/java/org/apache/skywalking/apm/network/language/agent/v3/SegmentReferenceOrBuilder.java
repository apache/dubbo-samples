// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent/Tracing.proto

package org.apache.skywalking.apm.network.language.agent.v3;

public interface SegmentReferenceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:skywalking.v3.SegmentReference)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Represent the reference type. It could be across thread or across process.
   * Across process means there is a downstream RPC call for this.
   * Typically, refType == CrossProcess means SpanObject#spanType = entry.
   * </pre>
   *
   * <code>.skywalking.v3.RefType refType = 1;</code>
   * @return The enum numeric value on the wire for refType.
   */
  int getRefTypeValue();
  /**
   * <pre>
   * Represent the reference type. It could be across thread or across process.
   * Across process means there is a downstream RPC call for this.
   * Typically, refType == CrossProcess means SpanObject#spanType = entry.
   * </pre>
   *
   * <code>.skywalking.v3.RefType refType = 1;</code>
   * @return The refType.
   */
  RefType getRefType();

  /**
   * <pre>
   * A string id represents the whole trace.
   * </pre>
   *
   * <code>string traceId = 2;</code>
   * @return The traceId.
   */
  String getTraceId();
  /**
   * <pre>
   * A string id represents the whole trace.
   * </pre>
   *
   * <code>string traceId = 2;</code>
   * @return The bytes for traceId.
   */
  com.google.protobuf.ByteString
      getTraceIdBytes();

  /**
   * <pre>
   * Another segment id as the parent.
   * </pre>
   *
   * <code>string parentTraceSegmentId = 3;</code>
   * @return The parentTraceSegmentId.
   */
  String getParentTraceSegmentId();
  /**
   * <pre>
   * Another segment id as the parent.
   * </pre>
   *
   * <code>string parentTraceSegmentId = 3;</code>
   * @return The bytes for parentTraceSegmentId.
   */
  com.google.protobuf.ByteString
      getParentTraceSegmentIdBytes();

  /**
   * <pre>
   * The span id in the parent trace segment.
   * </pre>
   *
   * <code>int32 parentSpanId = 4;</code>
   * @return The parentSpanId.
   */
  int getParentSpanId();

  /**
   * <pre>
   * The service logic name of the parent segment.
   * If refType == CrossThread, this name is as same as the trace segment.
   * </pre>
   *
   * <code>string parentService = 5;</code>
   * @return The parentService.
   */
  String getParentService();
  /**
   * <pre>
   * The service logic name of the parent segment.
   * If refType == CrossThread, this name is as same as the trace segment.
   * </pre>
   *
   * <code>string parentService = 5;</code>
   * @return The bytes for parentService.
   */
  com.google.protobuf.ByteString
      getParentServiceBytes();

  /**
   * <pre>
   * The service logic name instance of the parent segment.
   * If refType == CrossThread, this name is as same as the trace segment.
   * </pre>
   *
   * <code>string parentServiceInstance = 6;</code>
   * @return The parentServiceInstance.
   */
  String getParentServiceInstance();
  /**
   * <pre>
   * The service logic name instance of the parent segment.
   * If refType == CrossThread, this name is as same as the trace segment.
   * </pre>
   *
   * <code>string parentServiceInstance = 6;</code>
   * @return The bytes for parentServiceInstance.
   */
  com.google.protobuf.ByteString
      getParentServiceInstanceBytes();

  /**
   * <pre>
   * The endpoint name of the parent segment.
   * **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
   * In a trace segment, the endpoint name is the name of first entry span.
   * </pre>
   *
   * <code>string parentEndpoint = 7;</code>
   * @return The parentEndpoint.
   */
  String getParentEndpoint();
  /**
   * <pre>
   * The endpoint name of the parent segment.
   * **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
   * In a trace segment, the endpoint name is the name of first entry span.
   * </pre>
   *
   * <code>string parentEndpoint = 7;</code>
   * @return The bytes for parentEndpoint.
   */
  com.google.protobuf.ByteString
      getParentEndpointBytes();

  /**
   * <pre>
   * The network address, including ip/hostname and port, which is used in the client side.
   * Such as Client --&gt; use 127.0.11.8:913 -&gt; Server
   * then, in the reference of entry span reported by Server, the value of this field is 127.0.11.8:913.
   * This plays the important role in the SkyWalking STAM(Streaming Topology Analysis Method)
   * For more details, read https://wu-sheng.github.io/STAM/
   * </pre>
   *
   * <code>string networkAddressUsedAtPeer = 8;</code>
   * @return The networkAddressUsedAtPeer.
   */
  String getNetworkAddressUsedAtPeer();
  /**
   * <pre>
   * The network address, including ip/hostname and port, which is used in the client side.
   * Such as Client --&gt; use 127.0.11.8:913 -&gt; Server
   * then, in the reference of entry span reported by Server, the value of this field is 127.0.11.8:913.
   * This plays the important role in the SkyWalking STAM(Streaming Topology Analysis Method)
   * For more details, read https://wu-sheng.github.io/STAM/
   * </pre>
   *
   * <code>string networkAddressUsedAtPeer = 8;</code>
   * @return The bytes for networkAddressUsedAtPeer.
   */
  com.google.protobuf.ByteString
      getNetworkAddressUsedAtPeerBytes();
}
