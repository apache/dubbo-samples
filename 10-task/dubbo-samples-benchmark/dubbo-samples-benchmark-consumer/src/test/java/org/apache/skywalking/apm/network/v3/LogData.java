// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging/Logging.proto

package org.apache.skywalking.apm.network.v3;

/**
 * <pre>
 * Log data is collected through file scratcher of agent.
 * Natively, Satellite provides various ways to collect logs.
 * </pre>
 *
 * Protobuf type {@code skywalking.v3.LogData}
 */
public final class LogData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:skywalking.v3.LogData)
    LogDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LogData.newBuilder() to construct.
  private LogData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LogData() {
    service_ = "";
    serviceInstance_ = "";
    endpoint_ = "";
    layer_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new LogData();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LogData(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            timestamp_ = input.readInt64();
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();

            service_ = s;
            break;
          }
          case 26: {
            String s = input.readStringRequireUtf8();

            serviceInstance_ = s;
            break;
          }
          case 34: {
            String s = input.readStringRequireUtf8();

            endpoint_ = s;
            break;
          }
          case 42: {
            org.apache.skywalking.apm.network.logging.v3.LogDataBody.Builder subBuilder = null;
            if (body_ != null) {
              subBuilder = body_.toBuilder();
            }
            body_ = input.readMessage(org.apache.skywalking.apm.network.logging.v3.LogDataBody.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(body_);
              body_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            org.apache.skywalking.apm.network.logging.v3.TraceContext.Builder subBuilder = null;
            if (traceContext_ != null) {
              subBuilder = traceContext_.toBuilder();
            }
            traceContext_ = input.readMessage(org.apache.skywalking.apm.network.logging.v3.TraceContext.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(traceContext_);
              traceContext_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            org.apache.skywalking.apm.network.logging.v3.LogTags.Builder subBuilder = null;
            if (tags_ != null) {
              subBuilder = tags_.toBuilder();
            }
            tags_ = input.readMessage(org.apache.skywalking.apm.network.logging.v3.LogTags.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(tags_);
              tags_ = subBuilder.buildPartial();
            }

            break;
          }
          case 66: {
            String s = input.readStringRequireUtf8();

            layer_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.skywalking.apm.network.logging.v3.Logging.internal_static_skywalking_v3_LogData_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.skywalking.apm.network.logging.v3.Logging.internal_static_skywalking_v3_LogData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.skywalking.apm.network.logging.v3.LogData.class, org.apache.skywalking.apm.network.logging.v3.LogData.Builder.class);
  }

  public static final int TIMESTAMP_FIELD_NUMBER = 1;
  private long timestamp_;
  /**
   * <pre>
   * [Optional] The timestamp of the log, in millisecond.
   * If not set, OAP server would use the received timestamp as log's timestamp, or relies on the OAP server analyzer.
   * </pre>
   *
   * <code>int64 timestamp = 1;</code>
   * @return The timestamp.
   */
  @Override
  public long getTimestamp() {
    return timestamp_;
  }

  public static final int SERVICE_FIELD_NUMBER = 2;
  private volatile Object service_;
  /**
   * <pre>
   * [Required] **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
   * The logic name represents the service. This would show as a separate node in the topology.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
   * If this is not the first element of the streaming, use the previous not-null name as the service name.
   * </pre>
   *
   * <code>string service = 2;</code>
   * @return The service.
   */
  @Override
  public String getService() {
    Object ref = service_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      service_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * [Required] **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
   * The logic name represents the service. This would show as a separate node in the topology.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
   * If this is not the first element of the streaming, use the previous not-null name as the service name.
   * </pre>
   *
   * <code>string service = 2;</code>
   * @return The bytes for service.
   */
  @Override
  public com.google.protobuf.ByteString
      getServiceBytes() {
    Object ref = service_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      service_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SERVICEINSTANCE_FIELD_NUMBER = 3;
  private volatile Object serviceInstance_;
  /**
   * <pre>
   * [Optional] **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
   * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
   * The logic name represents the service instance. This would show as a separate node in the instance relationship.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
   * </pre>
   *
   * <code>string serviceInstance = 3;</code>
   * @return The serviceInstance.
   */
  @Override
  public String getServiceInstance() {
    Object ref = serviceInstance_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      serviceInstance_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * [Optional] **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
   * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
   * The logic name represents the service instance. This would show as a separate node in the instance relationship.
   * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
   * </pre>
   *
   * <code>string serviceInstance = 3;</code>
   * @return The bytes for serviceInstance.
   */
  @Override
  public com.google.protobuf.ByteString
      getServiceInstanceBytes() {
    Object ref = serviceInstance_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      serviceInstance_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ENDPOINT_FIELD_NUMBER = 4;
  private volatile Object endpoint_;
  /**
   * <pre>
   * [Optional] **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
   * The logic name represents the endpoint, which logs belong.
   * </pre>
   *
   * <code>string endpoint = 4;</code>
   * @return The endpoint.
   */
  @Override
  public String getEndpoint() {
    Object ref = endpoint_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      endpoint_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * [Optional] **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
   * The logic name represents the endpoint, which logs belong.
   * </pre>
   *
   * <code>string endpoint = 4;</code>
   * @return The bytes for endpoint.
   */
  @Override
  public com.google.protobuf.ByteString
      getEndpointBytes() {
    Object ref = endpoint_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      endpoint_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BODY_FIELD_NUMBER = 5;
  private org.apache.skywalking.apm.network.logging.v3.LogDataBody body_;
  /**
   * <pre>
   * [Required] The content of the log.
   * </pre>
   *
   * <code>.skywalking.v3.LogDataBody body = 5;</code>
   * @return Whether the body field is set.
   */
  @Override
  public boolean hasBody() {
    return body_ != null;
  }
  /**
   * <pre>
   * [Required] The content of the log.
   * </pre>
   *
   * <code>.skywalking.v3.LogDataBody body = 5;</code>
   * @return The body.
   */
  @Override
  public org.apache.skywalking.apm.network.logging.v3.LogDataBody getBody() {
    return body_ == null ? org.apache.skywalking.apm.network.logging.v3.LogDataBody.getDefaultInstance() : body_;
  }
  /**
   * <pre>
   * [Required] The content of the log.
   * </pre>
   *
   * <code>.skywalking.v3.LogDataBody body = 5;</code>
   */
  @Override
  public org.apache.skywalking.apm.network.logging.v3.LogDataBodyOrBuilder getBodyOrBuilder() {
    return getBody();
  }

  public static final int TRACECONTEXT_FIELD_NUMBER = 6;
  private org.apache.skywalking.apm.network.logging.v3.TraceContext traceContext_;
  /**
   * <pre>
   * [Optional] Logs with trace context
   * </pre>
   *
   * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
   * @return Whether the traceContext field is set.
   */
  @Override
  public boolean hasTraceContext() {
    return traceContext_ != null;
  }
  /**
   * <pre>
   * [Optional] Logs with trace context
   * </pre>
   *
   * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
   * @return The traceContext.
   */
  @Override
  public org.apache.skywalking.apm.network.logging.v3.TraceContext getTraceContext() {
    return traceContext_ == null ? org.apache.skywalking.apm.network.logging.v3.TraceContext.getDefaultInstance() : traceContext_;
  }
  /**
   * <pre>
   * [Optional] Logs with trace context
   * </pre>
   *
   * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
   */
  @Override
  public org.apache.skywalking.apm.network.logging.v3.TraceContextOrBuilder getTraceContextOrBuilder() {
    return getTraceContext();
  }

  public static final int TAGS_FIELD_NUMBER = 7;
  private org.apache.skywalking.apm.network.logging.v3.LogTags tags_;
  /**
   * <pre>
   * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
   * </pre>
   *
   * <code>.skywalking.v3.LogTags tags = 7;</code>
   * @return Whether the tags field is set.
   */
  @Override
  public boolean hasTags() {
    return tags_ != null;
  }
  /**
   * <pre>
   * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
   * </pre>
   *
   * <code>.skywalking.v3.LogTags tags = 7;</code>
   * @return The tags.
   */
  @Override
  public org.apache.skywalking.apm.network.logging.v3.LogTags getTags() {
    return tags_ == null ? org.apache.skywalking.apm.network.logging.v3.LogTags.getDefaultInstance() : tags_;
  }
  /**
   * <pre>
   * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
   * </pre>
   *
   * <code>.skywalking.v3.LogTags tags = 7;</code>
   */
  @Override
  public org.apache.skywalking.apm.network.logging.v3.LogTagsOrBuilder getTagsOrBuilder() {
    return getTags();
  }

  public static final int LAYER_FIELD_NUMBER = 8;
  private volatile Object layer_;
  /**
   * <pre>
   * [Optional] Since 9.0.0
   * The layer of the service and servce instance. If absent, the OAP would set `layer`=`ID: 2, NAME: general`
   * </pre>
   *
   * <code>string layer = 8;</code>
   * @return The layer.
   */
  @Override
  public String getLayer() {
    Object ref = layer_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      layer_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * [Optional] Since 9.0.0
   * The layer of the service and servce instance. If absent, the OAP would set `layer`=`ID: 2, NAME: general`
   * </pre>
   *
   * <code>string layer = 8;</code>
   * @return The bytes for layer.
   */
  @Override
  public com.google.protobuf.ByteString
      getLayerBytes() {
    Object ref = layer_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      layer_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (timestamp_ != 0L) {
      output.writeInt64(1, timestamp_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(service_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, service_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(serviceInstance_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, serviceInstance_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(endpoint_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, endpoint_);
    }
    if (body_ != null) {
      output.writeMessage(5, getBody());
    }
    if (traceContext_ != null) {
      output.writeMessage(6, getTraceContext());
    }
    if (tags_ != null) {
      output.writeMessage(7, getTags());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(layer_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, layer_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (timestamp_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, timestamp_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(service_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, service_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(serviceInstance_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, serviceInstance_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(endpoint_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, endpoint_);
    }
    if (body_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getBody());
    }
    if (traceContext_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getTraceContext());
    }
    if (tags_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getTags());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(layer_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, layer_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.skywalking.apm.network.logging.v3.LogData)) {
      return super.equals(obj);
    }
    org.apache.skywalking.apm.network.logging.v3.LogData other = (org.apache.skywalking.apm.network.logging.v3.LogData) obj;

    if (getTimestamp()
        != other.getTimestamp()) return false;
    if (!getService()
        .equals(other.getService())) return false;
    if (!getServiceInstance()
        .equals(other.getServiceInstance())) return false;
    if (!getEndpoint()
        .equals(other.getEndpoint())) return false;
    if (hasBody() != other.hasBody()) return false;
    if (hasBody()) {
      if (!getBody()
          .equals(other.getBody())) return false;
    }
    if (hasTraceContext() != other.hasTraceContext()) return false;
    if (hasTraceContext()) {
      if (!getTraceContext()
          .equals(other.getTraceContext())) return false;
    }
    if (hasTags() != other.hasTags()) return false;
    if (hasTags()) {
      if (!getTags()
          .equals(other.getTags())) return false;
    }
    if (!getLayer()
        .equals(other.getLayer())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTimestamp());
    hash = (37 * hash) + SERVICE_FIELD_NUMBER;
    hash = (53 * hash) + getService().hashCode();
    hash = (37 * hash) + SERVICEINSTANCE_FIELD_NUMBER;
    hash = (53 * hash) + getServiceInstance().hashCode();
    hash = (37 * hash) + ENDPOINT_FIELD_NUMBER;
    hash = (53 * hash) + getEndpoint().hashCode();
    if (hasBody()) {
      hash = (37 * hash) + BODY_FIELD_NUMBER;
      hash = (53 * hash) + getBody().hashCode();
    }
    if (hasTraceContext()) {
      hash = (37 * hash) + TRACECONTEXT_FIELD_NUMBER;
      hash = (53 * hash) + getTraceContext().hashCode();
    }
    if (hasTags()) {
      hash = (37 * hash) + TAGS_FIELD_NUMBER;
      hash = (53 * hash) + getTags().hashCode();
    }
    hash = (37 * hash) + LAYER_FIELD_NUMBER;
    hash = (53 * hash) + getLayer().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.skywalking.apm.network.logging.v3.LogData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.skywalking.apm.network.logging.v3.LogData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.skywalking.apm.network.logging.v3.LogData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Log data is collected through file scratcher of agent.
   * Natively, Satellite provides various ways to collect logs.
   * </pre>
   *
   * Protobuf type {@code skywalking.v3.LogData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:skywalking.v3.LogData)
      org.apache.skywalking.apm.network.logging.v3.LogDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.skywalking.apm.network.logging.v3.Logging.internal_static_skywalking_v3_LogData_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.skywalking.apm.network.logging.v3.Logging.internal_static_skywalking_v3_LogData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.skywalking.apm.network.logging.v3.LogData.class, org.apache.skywalking.apm.network.logging.v3.LogData.Builder.class);
    }

    // Construct using org.apache.skywalking.apm.network.logging.v3.LogData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      timestamp_ = 0L;

      service_ = "";

      serviceInstance_ = "";

      endpoint_ = "";

      if (bodyBuilder_ == null) {
        body_ = null;
      } else {
        body_ = null;
        bodyBuilder_ = null;
      }
      if (traceContextBuilder_ == null) {
        traceContext_ = null;
      } else {
        traceContext_ = null;
        traceContextBuilder_ = null;
      }
      if (tagsBuilder_ == null) {
        tags_ = null;
      } else {
        tags_ = null;
        tagsBuilder_ = null;
      }
      layer_ = "";

      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.skywalking.apm.network.logging.v3.Logging.internal_static_skywalking_v3_LogData_descriptor;
    }

    @Override
    public org.apache.skywalking.apm.network.logging.v3.LogData getDefaultInstanceForType() {
      return org.apache.skywalking.apm.network.logging.v3.LogData.getDefaultInstance();
    }

    @Override
    public org.apache.skywalking.apm.network.logging.v3.LogData build() {
      org.apache.skywalking.apm.network.logging.v3.LogData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public org.apache.skywalking.apm.network.logging.v3.LogData buildPartial() {
      org.apache.skywalking.apm.network.logging.v3.LogData result = new org.apache.skywalking.apm.network.logging.v3.LogData(this);
      result.timestamp_ = timestamp_;
      result.service_ = service_;
      result.serviceInstance_ = serviceInstance_;
      result.endpoint_ = endpoint_;
      if (bodyBuilder_ == null) {
        result.body_ = body_;
      } else {
        result.body_ = bodyBuilder_.build();
      }
      if (traceContextBuilder_ == null) {
        result.traceContext_ = traceContext_;
      } else {
        result.traceContext_ = traceContextBuilder_.build();
      }
      if (tagsBuilder_ == null) {
        result.tags_ = tags_;
      } else {
        result.tags_ = tagsBuilder_.build();
      }
      result.layer_ = layer_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.skywalking.apm.network.logging.v3.LogData) {
        return mergeFrom((org.apache.skywalking.apm.network.logging.v3.LogData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.skywalking.apm.network.logging.v3.LogData other) {
      if (other == org.apache.skywalking.apm.network.logging.v3.LogData.getDefaultInstance()) return this;
      if (other.getTimestamp() != 0L) {
        setTimestamp(other.getTimestamp());
      }
      if (!other.getService().isEmpty()) {
        service_ = other.service_;
        onChanged();
      }
      if (!other.getServiceInstance().isEmpty()) {
        serviceInstance_ = other.serviceInstance_;
        onChanged();
      }
      if (!other.getEndpoint().isEmpty()) {
        endpoint_ = other.endpoint_;
        onChanged();
      }
      if (other.hasBody()) {
        mergeBody(other.getBody());
      }
      if (other.hasTraceContext()) {
        mergeTraceContext(other.getTraceContext());
      }
      if (other.hasTags()) {
        mergeTags(other.getTags());
      }
      if (!other.getLayer().isEmpty()) {
        layer_ = other.layer_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.apache.skywalking.apm.network.logging.v3.LogData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.apache.skywalking.apm.network.logging.v3.LogData) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private long timestamp_ ;
    /**
     * <pre>
     * [Optional] The timestamp of the log, in millisecond.
     * If not set, OAP server would use the received timestamp as log's timestamp, or relies on the OAP server analyzer.
     * </pre>
     *
     * <code>int64 timestamp = 1;</code>
     * @return The timestamp.
     */
    @Override
    public long getTimestamp() {
      return timestamp_;
    }
    /**
     * <pre>
     * [Optional] The timestamp of the log, in millisecond.
     * If not set, OAP server would use the received timestamp as log's timestamp, or relies on the OAP server analyzer.
     * </pre>
     *
     * <code>int64 timestamp = 1;</code>
     * @param value The timestamp to set.
     * @return This builder for chaining.
     */
    public Builder setTimestamp(long value) {

      timestamp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] The timestamp of the log, in millisecond.
     * If not set, OAP server would use the received timestamp as log's timestamp, or relies on the OAP server analyzer.
     * </pre>
     *
     * <code>int64 timestamp = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimestamp() {

      timestamp_ = 0L;
      onChanged();
      return this;
    }

    private Object service_ = "";
    /**
     * <pre>
     * [Required] **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
     * The logic name represents the service. This would show as a separate node in the topology.
     * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
     * If this is not the first element of the streaming, use the previous not-null name as the service name.
     * </pre>
     *
     * <code>string service = 2;</code>
     * @return The service.
     */
    public String getService() {
      Object ref = service_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        service_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * [Required] **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
     * The logic name represents the service. This would show as a separate node in the topology.
     * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
     * If this is not the first element of the streaming, use the previous not-null name as the service name.
     * </pre>
     *
     * <code>string service = 2;</code>
     * @return The bytes for service.
     */
    public com.google.protobuf.ByteString
        getServiceBytes() {
      Object ref = service_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        service_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * [Required] **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
     * The logic name represents the service. This would show as a separate node in the topology.
     * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
     * If this is not the first element of the streaming, use the previous not-null name as the service name.
     * </pre>
     *
     * <code>string service = 2;</code>
     * @param value The service to set.
     * @return This builder for chaining.
     */
    public Builder setService(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      service_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Required] **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
     * The logic name represents the service. This would show as a separate node in the topology.
     * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
     * If this is not the first element of the streaming, use the previous not-null name as the service name.
     * </pre>
     *
     * <code>string service = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearService() {

      service_ = getDefaultInstance().getService();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Required] **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
     * The logic name represents the service. This would show as a separate node in the topology.
     * The metrics analyzed from the spans, would be aggregated for this entity as the service level.
     * If this is not the first element of the streaming, use the previous not-null name as the service name.
     * </pre>
     *
     * <code>string service = 2;</code>
     * @param value The bytes for service to set.
     * @return This builder for chaining.
     */
    public Builder setServiceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      service_ = value;
      onChanged();
      return this;
    }

    private Object serviceInstance_ = "";
    /**
     * <pre>
     * [Optional] **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
     * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
     * The logic name represents the service instance. This would show as a separate node in the instance relationship.
     * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
     * </pre>
     *
     * <code>string serviceInstance = 3;</code>
     * @return The serviceInstance.
     */
    public String getServiceInstance() {
      Object ref = serviceInstance_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        serviceInstance_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * [Optional] **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
     * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
     * The logic name represents the service instance. This would show as a separate node in the instance relationship.
     * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
     * </pre>
     *
     * <code>string serviceInstance = 3;</code>
     * @return The bytes for serviceInstance.
     */
    public com.google.protobuf.ByteString
        getServiceInstanceBytes() {
      Object ref = serviceInstance_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        serviceInstance_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * [Optional] **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
     * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
     * The logic name represents the service instance. This would show as a separate node in the instance relationship.
     * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
     * </pre>
     *
     * <code>string serviceInstance = 3;</code>
     * @param value The serviceInstance to set.
     * @return This builder for chaining.
     */
    public Builder setServiceInstance(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      serviceInstance_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
     * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
     * The logic name represents the service instance. This would show as a separate node in the instance relationship.
     * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
     * </pre>
     *
     * <code>string serviceInstance = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearServiceInstance() {

      serviceInstance_ = getDefaultInstance().getServiceInstance();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
     * doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
     * The logic name represents the service instance. This would show as a separate node in the instance relationship.
     * The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
     * </pre>
     *
     * <code>string serviceInstance = 3;</code>
     * @param value The bytes for serviceInstance to set.
     * @return This builder for chaining.
     */
    public Builder setServiceInstanceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      serviceInstance_ = value;
      onChanged();
      return this;
    }

    private Object endpoint_ = "";
    /**
     * <pre>
     * [Optional] **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
     * The logic name represents the endpoint, which logs belong.
     * </pre>
     *
     * <code>string endpoint = 4;</code>
     * @return The endpoint.
     */
    public String getEndpoint() {
      Object ref = endpoint_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        endpoint_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * [Optional] **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
     * The logic name represents the endpoint, which logs belong.
     * </pre>
     *
     * <code>string endpoint = 4;</code>
     * @return The bytes for endpoint.
     */
    public com.google.protobuf.ByteString
        getEndpointBytes() {
      Object ref = endpoint_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        endpoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * [Optional] **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
     * The logic name represents the endpoint, which logs belong.
     * </pre>
     *
     * <code>string endpoint = 4;</code>
     * @param value The endpoint to set.
     * @return This builder for chaining.
     */
    public Builder setEndpoint(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      endpoint_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
     * The logic name represents the endpoint, which logs belong.
     * </pre>
     *
     * <code>string endpoint = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearEndpoint() {

      endpoint_ = getDefaultInstance().getEndpoint();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
     * The logic name represents the endpoint, which logs belong.
     * </pre>
     *
     * <code>string endpoint = 4;</code>
     * @param value The bytes for endpoint to set.
     * @return This builder for chaining.
     */
    public Builder setEndpointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      endpoint_ = value;
      onChanged();
      return this;
    }

    private org.apache.skywalking.apm.network.logging.v3.LogDataBody body_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.skywalking.apm.network.logging.v3.LogDataBody, org.apache.skywalking.apm.network.logging.v3.LogDataBody.Builder, org.apache.skywalking.apm.network.logging.v3.LogDataBodyOrBuilder> bodyBuilder_;
    /**
     * <pre>
     * [Required] The content of the log.
     * </pre>
     *
     * <code>.skywalking.v3.LogDataBody body = 5;</code>
     * @return Whether the body field is set.
     */
    public boolean hasBody() {
      return bodyBuilder_ != null || body_ != null;
    }
    /**
     * <pre>
     * [Required] The content of the log.
     * </pre>
     *
     * <code>.skywalking.v3.LogDataBody body = 5;</code>
     * @return The body.
     */
    public org.apache.skywalking.apm.network.logging.v3.LogDataBody getBody() {
      if (bodyBuilder_ == null) {
        return body_ == null ? org.apache.skywalking.apm.network.logging.v3.LogDataBody.getDefaultInstance() : body_;
      } else {
        return bodyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * [Required] The content of the log.
     * </pre>
     *
     * <code>.skywalking.v3.LogDataBody body = 5;</code>
     */
    public Builder setBody(org.apache.skywalking.apm.network.logging.v3.LogDataBody value) {
      if (bodyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        body_ = value;
        onChanged();
      } else {
        bodyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * [Required] The content of the log.
     * </pre>
     *
     * <code>.skywalking.v3.LogDataBody body = 5;</code>
     */
    public Builder setBody(
        org.apache.skywalking.apm.network.logging.v3.LogDataBody.Builder builderForValue) {
      if (bodyBuilder_ == null) {
        body_ = builderForValue.build();
        onChanged();
      } else {
        bodyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * [Required] The content of the log.
     * </pre>
     *
     * <code>.skywalking.v3.LogDataBody body = 5;</code>
     */
    public Builder mergeBody(org.apache.skywalking.apm.network.logging.v3.LogDataBody value) {
      if (bodyBuilder_ == null) {
        if (body_ != null) {
          body_ =
            org.apache.skywalking.apm.network.logging.v3.LogDataBody.newBuilder(body_).mergeFrom(value).buildPartial();
        } else {
          body_ = value;
        }
        onChanged();
      } else {
        bodyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * [Required] The content of the log.
     * </pre>
     *
     * <code>.skywalking.v3.LogDataBody body = 5;</code>
     */
    public Builder clearBody() {
      if (bodyBuilder_ == null) {
        body_ = null;
        onChanged();
      } else {
        body_ = null;
        bodyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * [Required] The content of the log.
     * </pre>
     *
     * <code>.skywalking.v3.LogDataBody body = 5;</code>
     */
    public org.apache.skywalking.apm.network.logging.v3.LogDataBody.Builder getBodyBuilder() {

      onChanged();
      return getBodyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * [Required] The content of the log.
     * </pre>
     *
     * <code>.skywalking.v3.LogDataBody body = 5;</code>
     */
    public org.apache.skywalking.apm.network.logging.v3.LogDataBodyOrBuilder getBodyOrBuilder() {
      if (bodyBuilder_ != null) {
        return bodyBuilder_.getMessageOrBuilder();
      } else {
        return body_ == null ?
            org.apache.skywalking.apm.network.logging.v3.LogDataBody.getDefaultInstance() : body_;
      }
    }
    /**
     * <pre>
     * [Required] The content of the log.
     * </pre>
     *
     * <code>.skywalking.v3.LogDataBody body = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.skywalking.apm.network.logging.v3.LogDataBody, org.apache.skywalking.apm.network.logging.v3.LogDataBody.Builder, org.apache.skywalking.apm.network.logging.v3.LogDataBodyOrBuilder>
        getBodyFieldBuilder() {
      if (bodyBuilder_ == null) {
        bodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.skywalking.apm.network.logging.v3.LogDataBody, org.apache.skywalking.apm.network.logging.v3.LogDataBody.Builder, org.apache.skywalking.apm.network.logging.v3.LogDataBodyOrBuilder>(
                getBody(),
                getParentForChildren(),
                isClean());
        body_ = null;
      }
      return bodyBuilder_;
    }

    private org.apache.skywalking.apm.network.logging.v3.TraceContext traceContext_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.skywalking.apm.network.logging.v3.TraceContext, org.apache.skywalking.apm.network.logging.v3.TraceContext.Builder, org.apache.skywalking.apm.network.logging.v3.TraceContextOrBuilder> traceContextBuilder_;
    /**
     * <pre>
     * [Optional] Logs with trace context
     * </pre>
     *
     * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
     * @return Whether the traceContext field is set.
     */
    public boolean hasTraceContext() {
      return traceContextBuilder_ != null || traceContext_ != null;
    }
    /**
     * <pre>
     * [Optional] Logs with trace context
     * </pre>
     *
     * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
     * @return The traceContext.
     */
    public org.apache.skywalking.apm.network.logging.v3.TraceContext getTraceContext() {
      if (traceContextBuilder_ == null) {
        return traceContext_ == null ? org.apache.skywalking.apm.network.logging.v3.TraceContext.getDefaultInstance() : traceContext_;
      } else {
        return traceContextBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * [Optional] Logs with trace context
     * </pre>
     *
     * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
     */
    public Builder setTraceContext(org.apache.skywalking.apm.network.logging.v3.TraceContext value) {
      if (traceContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        traceContext_ = value;
        onChanged();
      } else {
        traceContextBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] Logs with trace context
     * </pre>
     *
     * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
     */
    public Builder setTraceContext(
        org.apache.skywalking.apm.network.logging.v3.TraceContext.Builder builderForValue) {
      if (traceContextBuilder_ == null) {
        traceContext_ = builderForValue.build();
        onChanged();
      } else {
        traceContextBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] Logs with trace context
     * </pre>
     *
     * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
     */
    public Builder mergeTraceContext(org.apache.skywalking.apm.network.logging.v3.TraceContext value) {
      if (traceContextBuilder_ == null) {
        if (traceContext_ != null) {
          traceContext_ =
            org.apache.skywalking.apm.network.logging.v3.TraceContext.newBuilder(traceContext_).mergeFrom(value).buildPartial();
        } else {
          traceContext_ = value;
        }
        onChanged();
      } else {
        traceContextBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] Logs with trace context
     * </pre>
     *
     * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
     */
    public Builder clearTraceContext() {
      if (traceContextBuilder_ == null) {
        traceContext_ = null;
        onChanged();
      } else {
        traceContext_ = null;
        traceContextBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] Logs with trace context
     * </pre>
     *
     * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
     */
    public org.apache.skywalking.apm.network.logging.v3.TraceContext.Builder getTraceContextBuilder() {

      onChanged();
      return getTraceContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * [Optional] Logs with trace context
     * </pre>
     *
     * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
     */
    public org.apache.skywalking.apm.network.logging.v3.TraceContextOrBuilder getTraceContextOrBuilder() {
      if (traceContextBuilder_ != null) {
        return traceContextBuilder_.getMessageOrBuilder();
      } else {
        return traceContext_ == null ?
            org.apache.skywalking.apm.network.logging.v3.TraceContext.getDefaultInstance() : traceContext_;
      }
    }
    /**
     * <pre>
     * [Optional] Logs with trace context
     * </pre>
     *
     * <code>.skywalking.v3.TraceContext traceContext = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.skywalking.apm.network.logging.v3.TraceContext, org.apache.skywalking.apm.network.logging.v3.TraceContext.Builder, org.apache.skywalking.apm.network.logging.v3.TraceContextOrBuilder>
        getTraceContextFieldBuilder() {
      if (traceContextBuilder_ == null) {
        traceContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.skywalking.apm.network.logging.v3.TraceContext, org.apache.skywalking.apm.network.logging.v3.TraceContext.Builder, org.apache.skywalking.apm.network.logging.v3.TraceContextOrBuilder>(
                getTraceContext(),
                getParentForChildren(),
                isClean());
        traceContext_ = null;
      }
      return traceContextBuilder_;
    }

    private org.apache.skywalking.apm.network.logging.v3.LogTags tags_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.skywalking.apm.network.logging.v3.LogTags, org.apache.skywalking.apm.network.logging.v3.LogTags.Builder, org.apache.skywalking.apm.network.logging.v3.LogTagsOrBuilder> tagsBuilder_;
    /**
     * <pre>
     * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
     * </pre>
     *
     * <code>.skywalking.v3.LogTags tags = 7;</code>
     * @return Whether the tags field is set.
     */
    public boolean hasTags() {
      return tagsBuilder_ != null || tags_ != null;
    }
    /**
     * <pre>
     * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
     * </pre>
     *
     * <code>.skywalking.v3.LogTags tags = 7;</code>
     * @return The tags.
     */
    public org.apache.skywalking.apm.network.logging.v3.LogTags getTags() {
      if (tagsBuilder_ == null) {
        return tags_ == null ? org.apache.skywalking.apm.network.logging.v3.LogTags.getDefaultInstance() : tags_;
      } else {
        return tagsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
     * </pre>
     *
     * <code>.skywalking.v3.LogTags tags = 7;</code>
     */
    public Builder setTags(org.apache.skywalking.apm.network.logging.v3.LogTags value) {
      if (tagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tags_ = value;
        onChanged();
      } else {
        tagsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
     * </pre>
     *
     * <code>.skywalking.v3.LogTags tags = 7;</code>
     */
    public Builder setTags(
        org.apache.skywalking.apm.network.logging.v3.LogTags.Builder builderForValue) {
      if (tagsBuilder_ == null) {
        tags_ = builderForValue.build();
        onChanged();
      } else {
        tagsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
     * </pre>
     *
     * <code>.skywalking.v3.LogTags tags = 7;</code>
     */
    public Builder mergeTags(org.apache.skywalking.apm.network.logging.v3.LogTags value) {
      if (tagsBuilder_ == null) {
        if (tags_ != null) {
          tags_ =
            org.apache.skywalking.apm.network.logging.v3.LogTags.newBuilder(tags_).mergeFrom(value).buildPartial();
        } else {
          tags_ = value;
        }
        onChanged();
      } else {
        tagsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
     * </pre>
     *
     * <code>.skywalking.v3.LogTags tags = 7;</code>
     */
    public Builder clearTags() {
      if (tagsBuilder_ == null) {
        tags_ = null;
        onChanged();
      } else {
        tags_ = null;
        tagsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
     * </pre>
     *
     * <code>.skywalking.v3.LogTags tags = 7;</code>
     */
    public org.apache.skywalking.apm.network.logging.v3.LogTags.Builder getTagsBuilder() {

      onChanged();
      return getTagsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
     * </pre>
     *
     * <code>.skywalking.v3.LogTags tags = 7;</code>
     */
    public org.apache.skywalking.apm.network.logging.v3.LogTagsOrBuilder getTagsOrBuilder() {
      if (tagsBuilder_ != null) {
        return tagsBuilder_.getMessageOrBuilder();
      } else {
        return tags_ == null ?
            org.apache.skywalking.apm.network.logging.v3.LogTags.getDefaultInstance() : tags_;
      }
    }
    /**
     * <pre>
     * [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
     * </pre>
     *
     * <code>.skywalking.v3.LogTags tags = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.skywalking.apm.network.logging.v3.LogTags, org.apache.skywalking.apm.network.logging.v3.LogTags.Builder, org.apache.skywalking.apm.network.logging.v3.LogTagsOrBuilder>
        getTagsFieldBuilder() {
      if (tagsBuilder_ == null) {
        tagsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.skywalking.apm.network.logging.v3.LogTags, org.apache.skywalking.apm.network.logging.v3.LogTags.Builder, org.apache.skywalking.apm.network.logging.v3.LogTagsOrBuilder>(
                getTags(),
                getParentForChildren(),
                isClean());
        tags_ = null;
      }
      return tagsBuilder_;
    }

    private Object layer_ = "";
    /**
     * <pre>
     * [Optional] Since 9.0.0
     * The layer of the service and servce instance. If absent, the OAP would set `layer`=`ID: 2, NAME: general`
     * </pre>
     *
     * <code>string layer = 8;</code>
     * @return The layer.
     */
    public String getLayer() {
      Object ref = layer_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        layer_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * [Optional] Since 9.0.0
     * The layer of the service and servce instance. If absent, the OAP would set `layer`=`ID: 2, NAME: general`
     * </pre>
     *
     * <code>string layer = 8;</code>
     * @return The bytes for layer.
     */
    public com.google.protobuf.ByteString
        getLayerBytes() {
      Object ref = layer_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        layer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * [Optional] Since 9.0.0
     * The layer of the service and servce instance. If absent, the OAP would set `layer`=`ID: 2, NAME: general`
     * </pre>
     *
     * <code>string layer = 8;</code>
     * @param value The layer to set.
     * @return This builder for chaining.
     */
    public Builder setLayer(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      layer_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] Since 9.0.0
     * The layer of the service and servce instance. If absent, the OAP would set `layer`=`ID: 2, NAME: general`
     * </pre>
     *
     * <code>string layer = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearLayer() {

      layer_ = getDefaultInstance().getLayer();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Optional] Since 9.0.0
     * The layer of the service and servce instance. If absent, the OAP would set `layer`=`ID: 2, NAME: general`
     * </pre>
     *
     * <code>string layer = 8;</code>
     * @param value The bytes for layer to set.
     * @return This builder for chaining.
     */
    public Builder setLayerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      layer_ = value;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:skywalking.v3.LogData)
  }

  // @@protoc_insertion_point(class_scope:skywalking.v3.LogData)
  private static final org.apache.skywalking.apm.network.logging.v3.LogData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.skywalking.apm.network.logging.v3.LogData();
  }

  public static org.apache.skywalking.apm.network.logging.v3.LogData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LogData>
      PARSER = new com.google.protobuf.AbstractParser<LogData>() {
    @Override
    public LogData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LogData(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LogData> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<LogData> getParserForType() {
    return PARSER;
  }

  @Override
  public org.apache.skywalking.apm.network.logging.v3.LogData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

