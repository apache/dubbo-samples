// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebpf/accesslog.proto

package org.apache.skywalking.apm.network.ebpf.accesslog.v3;

public interface AccessLogHTTPProtocolRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:skywalking.v3.AccessLogHTTPProtocolRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.skywalking.v3.AccessLogHTTPProtocolRequestMethod method = 1;</code>
   * @return The enum numeric value on the wire for method.
   */
  int getMethodValue();
  /**
   * <code>.skywalking.v3.AccessLogHTTPProtocolRequestMethod method = 1;</code>
   * @return The method.
   */
  AccessLogHTTPProtocolRequestMethod getMethod();

  /**
   * <pre>
   * The path portion from the incoming request URI.
   * </pre>
   *
   * <code>string path = 2;</code>
   * @return The path.
   */
  String getPath();
  /**
   * <pre>
   * The path portion from the incoming request URI.
   * </pre>
   *
   * <code>string path = 2;</code>
   * @return The bytes for path.
   */
  com.google.protobuf.ByteString
      getPathBytes();

  /**
   * <pre>
   * Request header and body size.
   * </pre>
   *
   * <code>uint64 sizeOfHeadersBytes = 3;</code>
   * @return The sizeOfHeadersBytes.
   */
  long getSizeOfHeadersBytes();

  /**
   * <code>uint64 sizeOfBodyBytes = 4;</code>
   * @return The sizeOfBodyBytes.
   */
  long getSizeOfBodyBytes();

  /**
   * <pre>
   * The trace information if detected.
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogTraceInfo trace = 5;</code>
   * @return Whether the trace field is set.
   */
  boolean hasTrace();
  /**
   * <pre>
   * The trace information if detected.
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogTraceInfo trace = 5;</code>
   * @return The trace.
   */
  AccessLogTraceInfo getTrace();
  /**
   * <pre>
   * The trace information if detected.
   * </pre>
   *
   * <code>.skywalking.v3.AccessLogTraceInfo trace = 5;</code>
   */
  AccessLogTraceInfoOrBuilder getTraceOrBuilder();
}
